---
openapi: 3.0.2
info:
  title: message-service
  version: 1.0.0
  description: API for the Netmobiel Message Service .
servers:
- url: https://api.netmobiel.eu/gwapi/msgsvc
  description: The message service visible to the world (production).
- url: https://otp.netmobiel.eu/msgsvc/api
  description: The internal URL for the message service (production).
- url: https://acc.netmobiel.eu/gwapi-acc/msgsvc
  description: The message service visible to the world (acceptance).
paths:
  /messages/{messageId}:
    summary: Path used to manage a single Message.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Message`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: Successful response - returns a single `Message`.
      operationId: getMessage
      summary: Get a Message
      description: Gets the details of a single instance of a `Message`.
    parameters:
    - name: messageId
      description: A unique identifier for a `Message`.
      schema:
        type: string
      in: path
      required: true
  /messages:
    summary: Path used to manage the list of messages.
    description: The REST endpoint/path used to list and create zero or more `Message`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      parameters:
      - name: groupByConveration
        description: If set then of messages is returned, ordered recent to older,
          where each message is the most recent message of each conversation. The
          recipient must also be set, other filters are not allowed. Without this
          flag a plain list of messages is returned.
        schema:
          type: boolean
        in: query
      - name: recipient
        description: |-
          The recipient of the messages. Only allowed with elevated privilege. The recipient domain is the Keycloak managed identity.
          Without this parameter the caller is considered to be the recipient.
        schema:
          type: string
        in: query
      - name: context
        description: The context to filter on. Only allowed if 'groupByConversation'
          is not set (or false).
        schema:
          type: string
        in: query
      - examples:
          Format:
            value: 2019-11-30T12:00:00+01:00
        name: since
        description: The date from which to start the listing. Default is beginning
          of the list.
        schema:
          format: date-time
          type: string
        in: query
      - examples:
          Format:
            value: 2019-12-15T14:00:00+01:00
        name: until
        description: The date and after which to limit the list. The `until` date
          must be after the `since` parameter. Default is not set, meaning all messages
          from now and before.
        schema:
          format: date-time
          type: string
        in: query
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: Successful response - returns an array of `Message` entities.
        "400":
          $ref: '#/components/responses/BadRequest'
      operationId: listMessages
      summary: List messages
      description: |-
        Gets a paged list of all `Message` entities. There are two forms supported:
        With the flag 'groupByConversation' the latest message of each context (the conversation) is selected.
        Without that flag a list of messages complying to the filter criteria are returned.
    post:
      requestBody:
        description: A new `Message` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: sendMessage
      summary: Create a Message
      description: Creates a new instance of a `Message`.
components:
  schemas:
    Error:
      title: Root Type for Error
      description: The error response.
      type: object
      properties:
        message:
          description: Human-readable error text intended for developers.
          type: string
        reasonPhrase:
          description: The HTTP status code textual message.
          type: string
        status:
          format: int32
          description: The HTTP status code.
          type: integer
        errorCode:
          description: A string code identifying the error. This code can be used
            to display an error message in the right language.
          type: string
      example:
        message: This is a really bad request
        reasonPhrase: Bad Request
        status: 400
    Message:
      description: A text message exchanged between one party and one or more others.
      required:
      - recipients
      - deliveryMode
      - context
      type: object
      properties:
        body:
          description: "The payload of the message comprising the actual message text\
            \ to convey. \nThis text should be in the right language. \nThe backend\
            \ services use message codes only."
          type: string
        context:
          description: The object reference to mark the context of the message. This
            is a urn, uniquely defining the object this message is about.
          type: string
        deliveryMode:
          description: "The deliver mode, indicating how the message should be delivered.\n\
            A message delivered in the inbox of each recipient and can be read by\
            \ the recipient at a later point. \nA notification only message is volatile\
            \ an is not saved in the inbox of the recipient. For auditing purposes\
            \ the message is saved in outbox of the sender. Notifications have a limited\
            \ lifetime (to be specified).\n"
          enum:
          - MESSAGE
          - NOTIFICATION
          - ALL
          type: string
        sender:
          description: The address of the sender. The system will assign the caller
            as the sender. If the caller has elevated privilege, a sender can set
            by the caller.
          type: string
        recipients:
          description: |-
            The list of recipients that should receive the message or have received the message.

            This field will only be present on read when a system account retrieves messages. In the normal case the calleer is the implicit recipient.
          type: string
        creationTime:
          format: date-time
          description: Read-only. The date and time the message was sent. This field
            is set by the message service.
          type: string
        ackTime:
          format: date-time
          description: Read-only. The timestamp conforming the reading of the message.
            Only set in case of a message, thus not in case of a notification.
          type: string
        subject:
          description: Human-readable context, used for displaying the subject of
            the context.
          type: string
  responses:
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Some application error occurred, indicating a bug in the application
        (500).
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The calling user is not allowed to perform the operation on the
        resource (403).
    NotAuthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The caller is not authorized to performed the intended operation
        (status 401).
    ServiceUnavailableException:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: 'The (underlying) service is (temporarily) not available. Try again
        later (503). '
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: A requested object could not be found (404).
    Gone:
      description: The requested object does no longer exist (410).
    Conflict:
      description: A conflict occurred with existing objects (duplicate key ec.).
        A 409 error.
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request was understood, but in incomplete or invalid and cannot
        be processed (400).
  securitySchemes:
    apikey:
      type: apiKey
      description: 'The Planner service requires an Api Key: x-gravitee-api-key in
        the header.'
      name: Api-key
      in: header
    Bearer-only:
      scheme: bearer
      type: http
      description: You need a valid access token.
