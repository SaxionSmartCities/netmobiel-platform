---
openapi: 3.0.2
info:
  title: profile-service
  version: 1.0.0
  description: API for the profile service of NetMobiel.
servers:
- url: http://localhost:3000/api
  description: The local URL for the profile service (acceptance, production).
- url: https://prod.netmobiel.eu/profiles/api
  description: The internal URL for the profile service (production).
- url: https://api.netmobiel.eu/gwapi/profiles
  description: The profile service visible to the world (production).
- url: https://acc.netmobiel.eu/profiles/api
  description: The internal URL for the profile service (acceptance).
- url: https://api.netmobiel.eu/gwapi/acc/profiles
  description: The profile service visible to the world (acceptance).
paths:
  /profiles/{profileId}:
    summary: Path used to manage a single `Profile`.
    description: The REST endpoint/path used to get, update, and delete a single instance
      of a `Profile`. This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: On success the profile is reurned.
        "401":
          $ref: '#/components/responses/NotAuthorized'
        "500":
          description: The profile could not be found.
      security:
      - apikey: []
        Bearer-only: []
      operationId: getProfile
      summary: Retrieves a profile
      description: Retrieves a profile from the database.
    put:
      requestBody:
        description: Updated `Profile` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        "200":
          description: Profile updated. The updated profile is returned.
        "401":
          $ref: '#/components/responses/NotAuthorized'
        "500":
          description: The profile could not be updated.
      security:
      - apikey: []
        Bearer-only: []
      operationId: updateProfile
      summary: Update a Profile
      description: Updates an existing `Profile`.
    delete:
      responses:
        "200":
          description: Successful response.
        "401":
          $ref: '#/components/responses/NotAuthorized'
        "500":
          description: The profile could not be deleted.
      security:
      - apikey: []
        Bearer-only: []
      operationId: deleteProfile
      summary: Delete a Profile
      description: Deletes an existing `Profile`. Profiles are hard deleted.
    parameters:
    - examples:
        keycloakId:
          value: 919e1308-6fe0-4727-881f-419bffa1ca7b
      name: profileId
      description: The keycloak managed identity of the user owning the profile.
      schema:
        type: string
      in: path
      required: true
  /profiles/{profileId}/fcmToken:
    summary: Path used to manage a single `Firebase Messaging Token`.
    description: The REST endpoint/path used to get a single instance of a `Firebase
      Messaging Token`. This path contains a `GET` operation to perform the get operation.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirebaseTokenResponse'
          description: Returns a FCM token.
      operationId: getFcmToken
      summary: Retrieves a `Firebase Messaging Token`.
      description: Retrieves a `Firebase Messaging Token` from the profile of a user,
        given the managed identity of the user.
    parameters:
    - examples:
        keycloakId:
          value: 919e1308-6fe0-4727-881f-419bffa1ca7b
      name: profileId
      description: The keycloak managed identity of the user owning the profile.
      schema:
        type: string
      in: path
      required: true
  /profiles/shout-out:
    summary: Path used to manage shout-outs.
    description: The REST endpoint/path used to search for drivers that are eligable
      for helping a traveller with a requested trip, or perhaps with the first or
      last leg of the trip. This path contains a `GET` operation to perform the search
      task.
    get:
      parameters:
      - name: withInAnyCircles
        description: Takes a list of circles in the format lat:lon:radius where the
          radius is in kilometers and fetches all profiles that have a home address
          within at least one of the circles. . Put the parameter value between square
          brackets.
        schema:
          type: string
        in: query
        required: true
      - examples:
          aCircle:
            value: '"[52.004166:6.517835:50,52.10:6.65:50]"'
        name: withInAllCircles
        description: Takes a list of circles in the format lat:lon:radius where the
          radius is in kilometers and fetches all profiles that have a home address
          within all of the circles. Put the parameter value between square brackets.
        schema:
          type: string
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          description: Successfull call. The result contains an array of `Profile`
            entities.
      operationId: searchShoutOutDrivers
      summary: Search for driver profiles with a geospatial query
      description: "Search for (driver) profiles where the driver has a home address\
        \ that satisfies the search criteria.\n\nThe search criteria is defined by\
        \ a list of two categories of circles:\n- A list of circles of which each\
        \ contains the home address;\n- A list of circles of which at least one contains\
        \ the home address.\n \nRationale: In a shout-out a prospecting traveller\
        \ is looking for a rideshare driver to take him/her \nto the intended destination.\
        \ The ride could also be the first or last leg of a multi-modal trip.\nThe\
        \ assumption is that the driver is prepared to drive a certain maximum distance\
        \ (allCircles) and that \nthe pickup or drop-off location of the traveller\
        \ should be in the neighbourhood (anyCircles)."
  /compliments:
    summary: Path used to manage the list of compliments.
    description: The REST endpoint/path used to list and create zero or more `Compliment`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      parameters:
      - name: senderId
        description: The user ID of the sender of the compliment.
        schema:
          type: string
        in: query
      - name: receiverId
        description: The user ID of the receiver of the compliment.
        schema:
          type: string
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplimentResponse'
          description: Successful response - returns a `Page` with `Compliment` entities.
      operationId: getCompliments
      summary: List compliments
      description: Gets a list of all `Compliment` entities.
    post:
      requestBody:
        description: A new `Compliment` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Compliment'
        required: true
      responses:
        "201":
          description: Successful response.
        "400":
          $ref: '#/components/responses/BadRequest'
        "422":
          description: Missing parameters.
      operationId: createCompliment
      summary: Create a Compliment
      description: Creates a new instance of a `Compliment`.
  /compliments/{complimentId}:
    summary: Path used to manage a single Compliment.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Compliment`.  This path contains `GET`, `PUT`, and `DELETE` operations
      used to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compliment'
          description: Successful response - returns a single `Compliment`.
      operationId: getCompliment
      summary: Get a Compliment
      description: Gets the details of a single instance of a `Compliment`.
    put:
      requestBody:
        description: Updated `Compliment` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Compliment'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateCompliment
      summary: Update a Compliment
      description: Updates an existing `Compliment`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteCompliment
      summary: Delete a Compliment
      description: Deletes an existing `Compliment`.
    parameters:
    - name: complimentId
      description: A unique identifier for a `Compliment`.
      schema:
        type: string
      in: path
      required: true
  /compliments/types:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplimentTypesResponse'
          description: Returns a list of compliment strings.
      operationId: getComplimentTypes
      summary: List compliment types
      description: Return an array of compliment types.
  /reviews/{reviewId}:
    summary: Path used to manage a single Review.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Review`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: Successful response - returns a single `Review`.
      operationId: getReview
      summary: Get a Review
      description: Gets the details of a single instance of a `Review`.
    put:
      requestBody:
        description: Updated `Review` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateReview
      summary: Update a Review
      description: Updates an existing `Review`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteReview
      summary: Delete a Review
      description: Deletes an existing `Review`.
    parameters:
    - name: reviewId
      description: A unique identifier for a `Review`.
      schema:
        type: string
      in: path
      required: true
  /reviews:
    summary: Path used to manage the list of reviews.
    description: The REST endpoint/path used to list and create zero or more `Review`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      parameters:
      - name: senderId
        description: The user ID of the sender of the review.
        schema:
          type: string
        in: query
      - name: receiverId
        description: The user ID of the receiver of the review.
        schema:
          type: string
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
          description: Successful response - returns a `Page` with `Review` entities.
      operationId: getReviews
      summary: List reviews
      description: Gets a list of all `Review` entities.
    post:
      requestBody:
        description: A new `Review` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "201":
          description: Successful response.
        "400":
          $ref: '#/components/responses/BadRequest'
        "422":
          description: Missing parameters.
      operationId: createReview
      summary: Create a Review
      description: Creates a new instance of a `Review`.
  /profiles/{profileId}/image:
    summary: Manages the profile image.
    description: Manage the profile image of the user of this profile.
    get:
      parameters:
      - name: profileId
        description: The profile is of the user.
        schema:
          type: string
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
          description: The relative path to the image or an empty string if none available.
      operationId: getProfileImage
      summary: Get the image path.
      description: Gets the path to the profile image.
    put:
      requestBody:
        description: The image to upload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
        required: true
      parameters:
      - name: profileId
        description: The profile id of the user.
        schema:
          type: string
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: The updated profile.
      operationId: uploadImage
      summary: Uploads an image
      description: Uploads an image. The previous image is removed. The path to the
        image is saved in the profile.
  /profiles:
    summary: Path used to manage profiles.
    description: The REST endpoint/path used to list and create zero or more `Profile`
      entities. This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      parameters:
      - name: role
        description: The role to search for. If omitted any role will do.
        schema:
          enum:
          - PASSENGER
          - DRIVER
          type: string
        in: query
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successfull call. The result contains a `Page` with `Profile`
            entities.
        "403":
          $ref: '#/components/responses/Forbidden'
      operationId: listProfiles
      summary: List profiles of users.
      description: "List profiles matching the search criteria. \n\nRequires admin\
        \ role."
    post:
      requestBody:
        description: A profile.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        "201":
          description: The profile is created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
              examples:
                "400response":
                  value:
                    succcess: false
                    message: Invalid date of birth.
          description: Invalid or missing date of birth.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
              examples:
                "409example":
                  value:
                    success: false
                    message: Profile already exists (in Keycloak).
          description: Profile already exists (in Keycloak).
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
              examples:
                "422response":
                  value:
                    success: false
                    message: Missing mandatory profile attributes (email, firstName
                      or lastName).
          description: 'One or more required parameters are missing: email, firstName,
            lastName.'
        "451":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
              examples:
                "451example":
                  value:
                    success: false
                    message: Terms have not been accepted.
          description: Terms have not been accepted, i.e. one of the consent options
            is not checked.
        "500":
          $ref: '#/components/responses/InternalServerError'
      security:
      - apikey: []
      operationId: createProfile
      summary: Create a profile.
      description: Creates a new profile
  /profiles/{profileId}/oldskool:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          description: Success response.
      operationId: getProfileOldskool
    parameters:
    - name: profileId
      schema:
        type: string
      in: path
      required: true
  /compliments/newskool:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: List all compliments
      operationId: getComplimentsNewSkool
  /profiles/shout-out/newskool:
    summary: Path used to manage shout-outs.
    description: The REST endpoint/path used to search for drivers that are eligable
      for helping a traveller with a requested trip, or perhaps with the first or
      last leg of the trip. This path contains a `GET` operation to perform the search
      task.
    get:
      parameters:
      - name: withInAnyCircles
        description: Takes a list of circles in the format lat:lon:radius where the
          radius is in kilometers and fetches all profiles that have a home address
          within at least one of the circles. . Put the parameter value between square
          brackets.
        schema:
          type: string
        in: query
        required: true
      - examples:
          aCircle:
            value: '"[52.004166:6.517835:50,52.10:6.65:50]"'
        name: withInAllCircles
        description: Takes a list of circles in the format lat:lon:radius where the
          radius is in kilometers and fetches all profiles that have a home address
          within all of the circles. Put the parameter value between square brackets.
        schema:
          type: string
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successfull call. The result contains an array of `Profile`
            entities.
      operationId: searchShoutOutDriversNewSkool
      summary: Search for driver profiles with a geospatial query
      description: "Search for (driver) profiles where the driver has a home address\
        \ that satisfies the search criteria.\n\nThe search criteria is defined by\
        \ a list of two categories of circles:\n- A list of circles of which each\
        \ contains the home address;\n- A list of circles of which at least one contains\
        \ the home address.\n \nRationale: In a shout-out a prospecting traveller\
        \ is looking for a rideshare driver to take him/her \nto the intended destination.\
        \ The ride could also be the first or last leg of a multi-modal trip.\nThe\
        \ assumption is that the driver is prepared to drive a certain maximum distance\
        \ (allCircles) and that \nthe pickup or drop-off location of the traveller\
        \ should be in the neighbourhood (anyCircles)."
  /reviews/newskool:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Get all reviews in oldskool stlye.
      operationId: getReviewsNewSkool
  /delegations/{delegationId}:
    summary: Path used to manage a single Delegation.
    description: Admin only. The REST endpoint/path used to get, update, and delete
      single instances of an `Delegation`.  This path contains `GET`, `PUT`, and `DELETE`
      operations used to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delegation'
          description: Successful response - returns a single `Delegation`.
      operationId: getDelegation
      summary: Get a Delegation
      description: Gets the details of a single instance of a `Delegation`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteDelegation
      summary: Delete a Delegation
      description: Deletes an existing `Delegation` by setting the revocation time.
        The actual record is retained, but the delegation is no longer active.
    parameters:
    - name: delegationId
      description: A unique identifier for a `Delegation`.
      schema:
        type: string
      in: path
      required: true
  /delegations:
    summary: Path used to manage the list of delegations.
    description: Admin only. The REST endpoint/path used to list and create zero or
      more `Delegation` entities.  This path contains a `GET` and `POST` operation
      to perform the list and create tasks, respectively.
    get:
      parameters:
      - name: delegate
        description: |-
          the user id acting as a representative for someone else. The format of the user id is the database id of a profile user, or an urn reference. Two formats are allowed:
          urn:nb:ps:user:{primary-key}
          urn:nb:kc:user:{managed-identity}
        schema:
          type: string
        in: query
      - name: delegator
        description: |-
          the user id being represented. The format of the user id is the database id of a profile user, or an urn reference. Two formats are allowed:
          urn:nb:ps:user:{primary-key}
          urn:nb:kc:user:{managed-identity}
        schema:
          type: string
        in: query
      - examples:
          Format:
            value: 2019-11-30T12:00:00+01:00
        name: since
        description: The start date at which to start the listing. Default is now.
        schema:
          format: date-time
          type: string
        in: query
      - examples:
          Format:
            value: 2019-12-15T14:00:00+01:00
        name: until
        description: The start date and later not to include in the listing. The `until`
          date must be after the `since` parameter. Default is not set, meaning all
          delegations (after since).
        schema:
          format: date-time
          type: string
        in: query
      - name: inactiveToo
        description: 'Set this flag to ''true'' if inactive delegations should be
          returned as well, that are delegations that been ended. Default is false. '
        schema:
          type: boolean
        in: query
      - name: sortDir
        description: "Direction of the sorting on departure time (or arrival time).\
          \ Choose either \nascending (ASC, default) or descending (DESC)."
        schema:
          enum:
          - ASC
          - DESC
          type: string
        in: query
        required: false
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delegation'
          description: Successful response - returns an array of `Delegation` entities.
      operationId: getDelegations
      summary: List all delegations
      description: Gets a list of all `Delegation` entities.
    post:
      requestBody:
        description: A new `Delegation` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delegation'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createDelegation
      summary: Create a Delegation
      description: Creates a new instance of a `Delegation`.
  /profiles/{profileId}/addresses/{addressId}:
    summary: Path used to manage a single Address.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `Address`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: Successful response - returns a single `Address`.
      operationId: getAddress
      summary: Get a Address
      description: Gets the details of a single instance of a `Address`.
    put:
      requestBody:
        description: Updated `Address` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateAddress
      summary: Update a Address
      description: Updates an existing `Address`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteAddress
      summary: Delete a Address
      description: Deletes an existing `Address`.
    parameters:
    - name: profileId
      description: A unique identifier for a `Profile`.
      schema:
        type: string
      in: path
      required: true
    - name: addressId
      description: A unique identifier for an `Address`.
      schema:
        type: string
      in: path
      required: true
  /profiles/{profileId}/addresses:
    summary: Path used to manage the list of addresses for an profile.
    description: The REST endpoint/path used to list and create zero or more `Address`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      parameters:
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successful response - returns a Page with an array of `Address`
            entities.
      operationId: getAddresses
      summary: List All addresses
      description: Gets a list of all `Address` entities of the profile.
    post:
      requestBody:
        description: A new `Address` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createAddress
      summary: Create a Address
      description: Creates a new instance of a `Address`.
    parameters:
    - name: profileId
      description: The unique id of the profile.
      in: path
      required: true
components:
  schemas:
    SearchPreferences:
      type: object
      properties:
        numPassengers:
          description: 'In case of searching for car rides: The preferred number of
            passengers that will go along. At least 1, at most 4.'
          maximum: 4
          minimum: 1
          type: integer
        maximumTransferTime:
          description: The maximum amount time the transfers may take in minutes.
            Default is 10 minutes.
          type: number
        luggageOptions:
          description: 'A list of default luggage options. Choose from the following
            options: `HANDLUGGAGE`, `PET`, `WALKER`, `STROLLER`, `WHEELCHAIR`, `GROCERIES`.'
          type: array
          items:
            type: string
        allowedTravelModes:
          description: 'The default preferences of travel modalities. Choose a combination
            from the following options: `BICYCLE`, `BUS`, `CAR`, `RAIL`, `RIDESHARE`,
            `WALK`.'
          type: array
          items:
            type: string
        allowTransfer:
          description: If true then transfers between modalities are allowed.
          type: boolean
        allowFirstLegTransfer:
          description: Flag to signal whether first leg can be a rideshare leg. Default
            is false.
          type: boolean
        allowLastLegTransfer:
          description: 'Flag to signal whether last leg (last mile) can be a rideshare
            leg. Default is false. '
          type: boolean
    Profile:
      description: The profile attributes of a user of NetMobiel.
      required:
      - email
      - firstName
      - lastName
      - dateOfBirth
      - consent
      - id
      - userRole
      - notificationOptions
      type: object
      properties:
        email:
          description: The email address.
          type: string
        firstName:
          description: The given name of the user.
          type: string
        lastName:
          description: The family name of the user.
          type: string
        dateOfBirth:
          format: date
          description: The date of birth of the user.
          type: string
        phoneNumber:
          description: The phone number where the user can be reached if necessary.
          type: string
        searchPreferences:
          $ref: '#/components/schemas/SearchPreferences'
          description: The preferences of a NetMobiel traveller role.
        fcmToken:
          description: The registration token for communicating messages through Google
            Firebase Messaging.
          type: string
        userRole:
          description: The role of the user (?).
          enum:
          - passenger
          - driver
          - both
          type: string
        consent:
          $ref: '#/components/schemas/UserConsent'
          description: The consent flags for the user.
        address:
          $ref: '#/components/schemas/Address'
          description: The home address of the user.
        id:
          description: The profile id, which is exactly equal to the Keycloak managed
            identity.
          type: string
        ridePlanOptions:
          $ref: '#/components/schemas/RidePlanOptions'
          description: The preferences of a driver role in NetMobiel.
        image:
          description: Path to the profile picture of the user. If the path is releatibve,
            then it starts with /images.
          type: string
        interests:
          description: A list of interests.
          type: array
          items:
            type: string
        favoriteLocations:
          description: A list of favorite locations.
          type: array
          items:
            $ref: '#/components/schemas/FavoriteLocation'
        notificationOptions:
          $ref: '#/components/schemas/NotificationOptions'
          description: The notification preferences
    UserConsent:
      title: Root Type for UserConsent
      description: Type user to flag consent with the terms of use of NetMobiel.
      type: object
      properties:
        olderThanSixteen:
          description: 'If true the user has confirmed his or her age to be at least
            16 years old. '
          type: boolean
        acceptedTerms:
          description: If true the user has agreed with the terms of use for NetMobiel.
          type: boolean
      example:
        olderThanSixteen: true
        acceptedTerms: true
    Address:
      title: Root Type for Address
      description: The address of a user.
      type: object
      properties:
        street:
          description: The name of the street.
          type: string
        houseNumber:
          description: The house number.
          type: string
        postalCode:
          description: The postal code for the address.
          type: string
        locality:
          description: The city or village name.
          type: string
        country:
          description: The country code according to ISO 3166-2.
          type: string
        location:
          $ref: '#/components/schemas/Location'
          description: The GPS location of this address.
        label:
          description: A short description of the place.
          type: string
      example:
        street: Rembrandtstraat
        houseNumber: "8"
        postalCode: 7556WD
        locality: Hengelo
        country: NL
        id: 1234567
        label: Thuis
        location:
          type: Point
          coordinates:
          - 6.6047
          - 52.04157
    RidePlanOptions:
      type: object
      properties:
        numPassengers:
          description: The maximum number of passengers that can be taken. At least
            1, at most 4.
          maximum: 4
          minimum: 1
          type: integer
        luggageOptions:
          description: 'A list of default luggage options. Choose from the following
            options: `HANDLUGGAGE`, `PET`, `WALKER`, `STROLLER`, `WHEELCHAIR`, `GROCERIES`.'
          type: array
          items:
            type: string
        maxMinutesDetour:
          description: The maximum amount time the driver will reserve for a detour
            to pickup and drop-off a passenger. Default is 10 minutes.
          type: number
        selectedCarId:
          description: The currently preferred car for ridesharing.
          type: string
    Location:
      title: Root Type for Location
      description: A GPS location.
      required:
      - type
      type: object
      properties:
        coordinates:
          description: The coordinates of the location as a longitude, latitude pair.
          type: array
          items:
            format: double
            type: number
        type:
          description: The type of the location. Always `Point`.
          type: string
      example:
        type: Point
        coordinates:
        - 6.6047
        - 52.04157
    NotificationOptions:
      title: Root Type for NotificationOptions
      description: Specified the preferences for notifications.
      type: object
      properties:
        tripConfirmations:
          type: boolean
        tripUpdates:
          type: boolean
        tripReminders:
          type: boolean
        messages:
          type: boolean
        shoutouts:
          type: boolean
      example:
        tripConfirmations: true
        tripUpdates: true
        tripReminders: true
        messages: true
        shoutouts: true
    UserRef:
      title: Root Type for UserRef
      description: A reference to a user, with the name included.
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      example:
        id: 5c76c977-2ffd-4100-a8c0-77db7129660d
        firstName: Passagier
        lastName: Acceptatie
    ComplimentTypesResponse:
      title: Root Type for ComplimentTypesResponse
      description: The response on the request for compliment types.
      type: object
      properties:
        complimentTypes:
          description: A list of compliments.
          type: array
          items:
            type: string
      example:
        complimentTypes:
        - Soepele Communicatie
        - Gezellig
    Review:
      title: Root Type for Review
      description: A review for a user.
      required:
      - receiver
      - published
      - id
      - review
      - sender
      type: object
      properties:
        id:
          description: Unique id of the review
          type: string
        published:
          format: date-time
          description: Date of publishing of the review.
          type: string
        sender:
          $ref: '#/components/schemas/UserRef'
          description: The sender of the review, i.e. the reviewer.
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
        receiver:
          $ref: '#/components/schemas/UserRef'
          description: The user receiving the review.
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
        review:
          description: The review text.
          type: string
      example:
        id: 5f9c1893bf7c52051be2231b
        published: 2020-10-27T08:29:51.901Z
        sender:
          id: 5c76c977-2ffd-4100-a8c0-77db7129660d
          firstName: Passagier
          lastName: Acceptatie
        receiver:
          id: b0c0d6c0-0de8-4669-88c7-57732a8dcd22
          firstName: Chauffeur
          lastName: Acceptatie
        review: Tot de volgende keer.
    FirebaseTokenResponse:
      title: Root Type for FirebaseMessagingToken
      description: Type of a messaging token.
      type: object
      properties:
        fcmToken:
          description: The `Firebase Messaing Token` used to send a message to a specific
            device.
          type: string
      example:
        fcmToken: "1234"
    ImageResponse:
      title: Root Type for ImageResponse
      description: The response to a request for a profile image
      type: object
      properties:
        image:
          type: string
      example:
        image: /images/ab/cdef.png
    ImageUploadRequest:
      description: The request for uploading an image.
      required:
      - image
      type: object
      properties:
        image:
          description: The image data encoded in base64.
          type: string
    Page:
      title: Root Type for Page
      description: A page from a result set. For smaller sets the page contains the
        complete result set.
      type: object
      properties:
        totalCount:
          format: int32
          description: |-
            The total number of items in the result set. If the number of items is unknown, then this attribute is omitted.

            There are no more items if 'offset' + 'count' >= 'totalCount' or when a resultset is returned with less than maxResults items.
          type: integer
        count:
          format: int32
          description: The number of items in this page.
          type: integer
        data:
          description: An array with the actual payload. The payload depends on the
            request being made.
          type: array
          items: {}
        offset:
          format: int32
          description: The zero-based offset in the result set. Should be equal to
            the offset passed by the request.
          type: integer
      example:
        totalCount: 104
        start: 32
        count: 16
        data: []
    Error:
      title: Root Type for Error
      description: The error response.
      type: object
      properties:
        message:
          type: string
        reasonPhrase:
          type: string
        status:
          format: int32
          type: integer
        errorCode:
          description: A string code identifying the error. This code can be used
            to display an error message in the right language.
          type: string
      example:
        message: This is a really bad request
        reasonPhrase: Bad Request
        status: 400
    ProfileResponse:
      title: Root Type for ProfileResponse
      description: Old response style for profiles return value.
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
      example:
        message: Succes!
        success: true
        profiles: []
    ComplimentResponse:
      title: Root Type for ProfileResponse
      description: Old response style for profiles return value.
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        compliments:
          type: array
          items:
            $ref: '#/components/schemas/Compliment'
      example:
        message: Succes!
        success: true
        compliments: []
    ReviewResponse:
      title: Root Type for ProfileResponse
      description: Old response style for profiles return value.
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
      example:
        message: Succes!
        success: true
        reviews: []
    Compliment:
      title: Root Type for Review
      description: A review for a user.
      required:
      - receiver
      - published
      - id
      - complimentType
      - sender
      type: object
      properties:
        id:
          description: Unique id of the compliment
          type: string
        published:
          format: date-time
          description: Date of publishing of the compliment.
          type: string
        sender:
          $ref: '#/components/schemas/UserRef'
          description: The sender of the compliment, i.e. the reviewer.
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
        receiver:
          $ref: '#/components/schemas/UserRef'
          description: The user receiving the compliment.
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
        complimentType:
          description: The compliment as an enum.
          enum:
          - Zelfde interesses
          - Op tijd
          - Soepele communicatie
          - Gezellig
          - Netjes
          - Goede auto
          type: string
      example:
        id: 5f9c1893bf7c52051be2231b
        published: 2020-10-27T08:29:51.901Z
        sender:
          id: 5c76c977-2ffd-4100-a8c0-77db7129660d
          firstName: Passagier
          lastName: Acceptatie
        receiver:
          id: b0c0d6c0-0de8-4669-88c7-57732a8dcd22
          firstName: Chauffeur
          lastName: Acceptatie
        complimentType: Soepele communicatie
    FavoriteLocation:
      title: Root Type for FavoriteLocation
      description: A favorite location.
      type: object
      properties:
        title:
          type: string
        highlightedTitle:
          type: string
        vicinity:
          type: string
        highlightedVicinity:
          type: string
        position:
          type: array
          items:
            format: double
            type: number
        category:
          type: string
        categoryTitle:
          type: string
        href:
          type: string
        type:
          type: string
        resultType:
          type: string
        id:
          type: string
        distance:
          format: int32
          type: integer
        favorite:
          type: boolean
        label:
          type: string
      example:
        title: Hengelo
        highlightedTitle: <span class="search-hit">Hengelo</span>
        vicinity: Stationsplein 1<br/>7551 CN Hengelo
        highlightedVicinity: Stationsplein 1<br/>7551 CN Hengelo
        position:
        - 52.26233
        - 6.79396
        category: railway-station
        categoryTitle: Railway Station
        href: https://places.api.here.com/places/v1/places/528u1kc6-774399be9c704af1822d4e0168099ed1;context=Zmxvdy1pZD0zMDczMWMxNS1kYjBiLTUwMTUtOWE1ZS1lMmIzMWM3MmYzNGVfMTU4MDgzMzgzMjU2NV83ODE5XzM5MyZyYW5rPTI?app_id=UMrkPaQbl3dl0AaufjBU&app_code=eFyPG-KbLHo_GQ4Pn75Zcw
        type: urn:nlp-types:place
        resultType: place
        id: 528u1kc6-774399be9c704af1822d4e0168099ed1
        distance: 101266
        favorite: true
        label: Hengelo
    Delegation:
      title: Root Type for Designation
      description: A `Delegation` describes the delegation relation between two profiles.
      type: object
      properties:
        delegate:
          $ref: '#/components/schemas/Profile'
          description: The person acting on NetMobiel on behalf of someone else (called
            the delegator).
          properties:
            givenName:
              type: string
            id:
              type: string
        delegator:
          $ref: '#/components/schemas/Profile'
          description: The person who is represented in NetMobiel by someone else
            (called the delegate).
          properties:
            givenName:
              type: string
            id:
              type: string
        revocationTime:
          format: date-time
          description: Read-only. The time where the delegation has ended. The delegation
            is after the revocation time no longer valid. If not set the end time
            of the delegation is undecided.
          type: string
        activationTime:
          format: date-time
          description: Read-only. The time the delegation was activated. If not set
            then the acceptation proces has not yet completed.
          type: string
        submissionTime:
          format: date-time
          description: Read-only. The time the submission to become a delegate  was
            issued, it marks the start of the delegation process.
          type: string
        transferCode:
          description: When an designation is created, a transfer code is generated
            and sent to the deleator. Only when the delegator trusts the delegate
            and tells the transfer code, the delegation becomes active by giving the
            acceptance time a value.
          type: string
        id:
          description: The database identifier.
          type: integer
        delegateRef:
          description: A reference to the delegate, the representative.
          type: string
        delegatorRef:
          description: A reference to person being represented.
          type: string
      example:
        delegate:
          givenName: Jaap
          id: 1234-5678
        delegator:
          givenName: Marietje
          id: 123421-567821
        submissionTime: 2021-02-25T00:00:00Z
        revocationTime: 2021-03-31T12.35.43Z
        activationTime: 2021-02-26T10:53:16Z
        transferCode: "123456"
        id: 1234
  responses:
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "500example":
              value:
                success: false
                message: Error querying profile from database.
      description: Some application error occurred, indicating a bug in the application
        (500) or some runtime problem with the database.
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "403example":
              value:
                success: false
                message: Forbidden.
      description: The calling user is not allowed to perform the operation on the
        resource (403).
    NotAuthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "401example":
              value:
                success: false
                message: Not authorized.
      description: The caller is not authorized to performed the intended operation
        (status 401).
    ServiceUnavailableException:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "503example":
              value:
                success: false
                message: Not available for now.
      description: 'The (underlying) service is (temporarily) not available. Try again
        later (503). '
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "404example":
              value:
                success: false
                message: Not found.
      description: A requested object could not be found (404).
    Gone:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "410example":
              value:
                success: false
                message: Object does no longer exist.
      description: The requested object does no longer exist (410).
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "409example":
              value:
                success: false
                message: Duplicate object.
      description: A conflict occurred with existing objects (duplicate key ec.) (409).
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
          examples:
            "400example":
              value:
                success: false
                message: Request is invalid and canmnot be understood.
      description: The request was understood, but in incomplete or invalid and cannot
        be processed (400).
  securitySchemes:
    apikey:
      type: apiKey
      description: 'The service requires an Api Key: x-gravitee-api-key in the header.'
      name: Api-key
      in: header
    Bearer-only:
      scheme: bearer
      type: http
      description: You need a valid access token.
security:
- apikey: []
  Bearer-only: []
