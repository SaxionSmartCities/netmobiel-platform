---
openapi: 3.0.2
info:
  title: banker
  version: 1.0.0
  description: The credit management service for NetMobiel
servers:
- url: https://prod.netmobiel.eu/banker/api
  description: The internal URL for the credit service (production).
- url: https://api.netmobiel.eu/gwapi/banker
  description: The credit service visible to the world (production).
- url: https://acc.netmobiel.eu/banker/api
  description: The internal URL for the credit service (acceptance).
- url: https://api.netmobiel.eu/gwapi/acc/banker
  description: The credit service visible to the world (acceptance).
paths:
  /accounting-entries:
    summary: Path used to manage the list of accounting entries.
    description: The REST endpoint/path used to list zero or more `AccountingEntry`
      entities.  This path contains a `GET` operation to perform the list task.
    get:
      parameters:
      - name: user
        description: |-
          The user owning the account(s). Only allowed with elevated privilege. The user domain is the Keycloak managed identity.
          Without this parameter the caller is considered to be the user.
        schema:
          type: string
        in: query
      - examples:
          Format:
            value: 2019-11-30T12:00:00+01:00
        name: since
        description: The maximum lookback date of the listing. Default is not set.
        schema:
          format: date-time
          type: string
        in: query
      - examples:
          Format:
            value: 2019-12-15T14:00:00+01:00
        name: until
        description: 'The date of the latest entry to retrieve. The `until` date must
          be after the `since` parameter. Default is not set, meaning all entries
          from now and before. '
        schema:
          format: date-time
          type: string
        in: query
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successful response - returns a `Page` with `AccountingEntry`
            entities.
        "400":
          $ref: '#/components/responses/BadRequest'
      security:
      - Bearer-only: []
        apikey: []
      operationId: listAccountingEntries
      summary: List accounting entries.
      description: "Gets a paged list of  `AccountingEntry` entities. Default the\
        \ entries owned by the calling user are listed while applying \nthe filter\
        \ criteria.\nThe administrator can request entries owned by any user. \n"
  /balances:
    summary: Path used to manage the list of balances.
    description: The REST endpoint/path used to list `Balance` entities.  This path
      contains a `GET` operation to perform the list task.
    get:
      parameters:
      - name: user
        description: |-
          The user owning the account(s). Only allowed with elevated privilege. The user domain is the Keycloak managed identity.
          Without this parameter the records of the calling user are retrieved.
        schema:
          type: string
        in: query
      - examples:
          Format:
            value: 2019-11-30T12:00:00+01:00
        name: period
        description: A (random) date in the period concerning the balance. Default
          is the balance of the active ledger.
        schema:
          format: date-time
          type: string
        in: query
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successful response - returns a `Page` with `Balance` entities.
        "400":
          $ref: '#/components/responses/BadRequest'
      security:
      - Bearer-only: []
        apikey: []
      operationId: listBalances
      summary: List all balances
      description: "Gets a paged list of  `Balance` entities. Default the entities\
        \ owned by the calling user are listed while applying \nthe filter criteria.\n\
        The administrator can request balances owned by any user. \n"
  /settings:
    summary: Path used to manage the list of settings.
    description: The REST endpoint/path used to list and create zero or more `Settings`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
          description: Successful response - returns an array of `Settings` entities.
      security:
      - Bearer-only: []
        apikey: []
      operationId: getSettings
      summary: List the settings
      description: Gets the `Settings` entity.
  /users: {}
  /users/{userId}:
    summary: Path used to manage a single User.
    description: The REST endpoint/path used to get, single instances of a `User`.  This
      path contains a `GET` operation used to perform the get task.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Return a single `User`.
      security:
      - apikey: []
        Bearer-only: []
      operationId: getUser
      summary: Get a User.
      description: Gets the details of a single instance of a `User`, including the
        current amount of credits owned (i.e., the actual balance).
    parameters:
    - name: userId
      description: |-
        The user id to use. Specify a banker user id, or a user urn from bank or keycloak. If referring to the caller use `me` as userId.

        Using a userid other than your own (or me) requires admin privilege.
      schema:
        type: string
      in: path
      required: true
  /deposits/events:
    summary: Path used to manage the list of deposit events.
    description: The REST endpoint/path used to create zero or more deposit events.
      This path contains a `POST` operation to perform the create task of updating
      a `DepositStatus`.
    post:
      requestBody:
        description: The event parameters, specifying the order_id and the project_id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentEvent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepositStatus'
          description: 'A deposit status is returned. When the status is completed,
            the payment has succeeded and the credits have been added. If active,
            the credits have not yet been added. '
      security:
      - {}
      operationId: updateDepositStatus
      summary: Updates the status of an deposit
      description: Verifies and updates the status of a deposit through the order_id
        passed on by the payment provider. As a side effect the status of the payment
        in the Banker Service is synchronized with the status of the payment at the
        payment provider. This method can be used as webhook for the EMS Pay payment
        provider. No security restrictions apply. Once the status is either expired
        or completed, it will not change anymore.
  /users/{userId}/deposits:
    summary: Path used to manage deposits to user accounts.
    description: The REST endpoint/path used to create zero or more `Deposit` entities.  This
      path contains a `POST` operation to perform the create task.
    post:
      requestBody:
        description: A new `Deposit` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deposit'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLink'
          description: Successful response.
      security:
      - Bearer-only: []
        apikey: []
      operationId: createDeposit
      summary: Create a Deposit
      description: Creates a new `Deposit`. The call returns a `PaymentLink`, containing
        a url to a payment page. The client should redirect a browser to the payment
        page url. The payment is converted into credits, the credits are added to
        the personal account of the specified user.
    parameters:
    - name: userId
      description: |-
        The user id to use. Specify a banker user id, or a user urn from bank or keycloak. If referring to the caller use `me` as userId.

        Using a userid other than your own (or me) requires admin privilege.
      schema:
        type: string
      in: path
      required: true
  /users/{userId}/statements:
    summary: Path used to manage the list of statements for a user.
    description: The REST endpoint/path used to list zero or more `Statement` entities.  This
      path contains a `GET` operation to perform the list task. A Statement reports
      on a credit transaction for this user.
    get:
      parameters:
      - examples:
          Format:
            value: 2019-11-30T12:00:00+01:00
        name: since
        description: The maximum lookback date of the listing. Default is not set.
        schema:
          format: date-time
          type: string
        in: query
      - examples:
          Format:
            value: 2019-12-15T14:00:00+01:00
        name: until
        description: 'The date of the latest entry to retrieve. The `until` date must
          be after the `since` parameter. Default is not set, meaning all entries
          from now and before. '
        schema:
          format: date-time
          type: string
        in: query
      - name: maxResults
        description: 'Paging: The maximum number of results per page. Default is 10.'
        schema:
          type: integer
        in: query
      - name: offset
        description: 'Paging: The zero-based offset in the result set to return.'
        schema:
          type: integer
        in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: Successful response - returns a `Page` with `Statement` entities.
        "400":
          $ref: '#/components/responses/BadRequest'
      security:
      - Bearer-only: []
        apikey: []
      operationId: listStatements
      summary: List Statement entries.
      description: "Gets a paged list of  `Statement` entities. \n\nThe administrator\
        \ can request statements owned by any user. \n"
    parameters:
    - name: userId
      description: |-
        The user id to use. Specify a banker user id, or a user urn from bank or keycloak. If referring to the caller use `me` as userId.

        Using a userid other than your own (or me) requires admin privilege.
      schema:
        type: string
      in: path
      required: true
components:
  schemas:
    Error:
      title: Root Type for Error
      description: The error response.
      type: object
      properties:
        message:
          description: Human-readable error text intended for developers.
          type: string
        reasonPhrase:
          description: The HTTP status code textual message.
          type: string
        status:
          format: int32
          description: The HTTP status code.
          type: integer
        errorCode:
          description: A string code identifying the error. This code can be used
            to display an error message in the right language.
          type: string
      example:
        message: This is a really bad request
        reasonPhrase: Bad Request
        status: 400
    User:
      description: 'A user in the message service. '
      required:
      - managedIdentity
      - givenName
      - familyName
      - credits
      type: object
      properties:
        id:
          format: int64
          description: 'The unique user id. If referenced use the URN notation: urn:nb:bn:user:<id>'
          type: integer
        managedIdentity:
          description: The user is as known by the IDM (Keycloak). The format is determined
            by the IDM.
          type: string
        givenName:
          description: The first name of the driver.
          type: string
        familyName:
          description: The family name of the driver.
          type: string
        credits:
          description: The amount of credits currently in possesion by the user.
          type: integer
      example:
        familyName: Normalverbraucher
        givenName: Otto
        id: 2
        managedIdentity: a8ee130f-23c6-4b26-bb79-b84a3799216d
        credits: 10
    Page:
      title: Root Type for Page
      description: A page from a result set. For smaller sets the page contains the
        complete result set.
      type: object
      properties:
        totalCount:
          format: int32
          description: |-
            The total number of items in the result set. If the number of items is unknown, then this attribute is omitted.

            There are no more items if 'offset' + 'count' >= 'totalCount' or when a resultset is returned with less than maxResults items.
          type: integer
        count:
          format: int32
          description: The number of items in this page.
          type: integer
        data:
          description: An array with the actual payload. The payload depends on the
            request being made.
          type: array
          items: {}
        offset:
          format: int32
          description: The zero-based offset in the result set. Should be equal to
            the offset passed by the request.
          type: integer
      example:
        totalCount: 104
        start: 32
        count: 16
        data: []
    Balance:
      title: Root Type for Balance
      description: A representation of the balance of an account.
      required:
      - account
      - endAmount
      - ledger
      - startAmount
      - modifiedTime
      type: object
      properties:
        startAmount:
          format: int32
          description: The amount at the start of the accounting period.
          type: integer
        endAmount:
          format: int32
          description: The amount of credits currently held in this account.
          type: integer
        ledger:
          description: The name of the accounting period, in general the fiscal year.
          type: string
        account:
          description: 'The account as known by the user. Example: `current` for tracking
            the amount of credits owned by the user.'
          type: string
        userRef:
          description: The user holding the account. The reference is a urn to the
            keycloak managed identity.
          type: string
        id:
          description: Database refrence of the entity.
          type: integer
        modifiedTime:
          format: date-time
          description: Last modification time.
          type: string
      example:
        startAmount: 54
        endAmount: 112
        ledger: "2020"
        account: current
        userRef: urn:nb:kc:user:919e1308-6fe0-4727-881f-419bffa1ca7b
        id: 23
        modifiedTime: 2020-04-09T13:33:00.000Z
    Settings:
      title: Root Type for Settings
      description: A collection of banking settings.
      type: object
      properties:
        exchangeRate:
          format: int32
          type: integer
      example:
        exchangeRate: 19
    Deposit:
      title: Root Type for Deposit
      description: Object for making a deposit to the Netmobiel system, converting
        euros to credits.
      type: object
      properties:
        description:
          type: string
        amountCredits:
          format: int32
          type: integer
        returnUrl:
          type: string
      example:
        description: Koop credits
        amountCredits: 100
        returnUrl: app://netmobielapp/payment-done
    PaymentLink:
      title: Root Type for PaymentLink
      description: Contains a url to the payment page for making a deposit.
      type: object
      properties:
        paymentUrl:
          type: string
      example:
        paymentUrl: https://api.online.emspay.eu/paymentlinks/805e7d01-ab46-44a9-b7cc-8f7d962ca152/
    DepositStatus:
      title: Root Type for DepositStatus
      description: Status of the deposit.
      required:
      - status
      type: object
      properties:
        status:
          description: The status of the payment link referred to by the order_id.
          enum:
          - ACTIVE
          - EXPIRED
          - COMPLETED
          type: string
      example:
        status: COMPLETED
    PaymentEvent:
      title: Root Type for PaymentEvent
      description: An event generated direct or indirect by a status change of an
        order at the EMS Pay payment provider.
      type: object
      properties:
        event:
          description: The name of the event. Only status_changed is supported.
          type: string
        order_id:
          description: The order id passed on by the payment provider in the return
            url.
          type: string
        project_id:
          description: The payment project id as defined at the EMS Pay payment provider.
          type: string
      example:
        event: status_changed
        order_id: 4c6afd74-a840-4aab-b411-1e6e0636d341
        project_id: b5f39273-44e7-4385-8e08-44612ef3e117
    Statement:
      title: Root Type for AccountingEntry
      description: An single accounting entry or booking statement.
      required:
      - accountType
      - accountingTime
      - account
      - amount
      - id
      - transactionTime
      - transactionType
      type: object
      properties:
        accountingTime:
          format: date-time
          description: The timestamp of the 'financial' fact.
          type: string
        transactionTime:
          format: date-time
          description: The timstamp of the actual execution of the transaction.
          type: string
        description:
          description: The short description of the transaction.
          type: string
        account:
          description: 'The account as known by the user. Example: `current` for tracking
            the amount of credits owned by the user.'
          type: string
        id:
          format: int32
          description: The database id of the entry.
          type: integer
        amount:
          format: int32
          description: The amount of credits involved in the transaction.
          type: integer
        transactionType:
          description: The type of the transaction.
          enum:
          - DEBIT
          - CREDIT
          type: string
        accountType:
          description: 'The type of the account. Normal users have a liability account,
            meaning that NetMobiel is owing them an amount of credits. '
          enum:
          - ASSET
          - LIABILITY
          type: string
        userRef:
          description: The user holding the account. The reference is a urn to the
            keycloak managed identity.
          type: string
      example:
        accountingTime: 2019-06-17T15:59:00Z
        transactionTime: 2019-06-17T16:30:00Z
        description: Rit met Coby Hoekstra naar Zelhem
        account: current
        id: 123456
        amount: 5
        type: CREDIT
        accountType: LIABILITY
        userRef: urn:nb:kc:user:919e1308-6fe0-4727-881f-419bffa1ca7b
  responses:
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Some application error occurred, indicating a bug in the application
        (500).
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The calling user is not allowed to perform the operation on the
        resource (403).
    NotAuthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The caller is not authorized to performed the intended operation
        (status 401).
    ServiceUnavailableException:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: 'The (underlying) service is (temporarily) not available. Try again
        later (503). '
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: A requested object could not be found (404).
    Gone:
      description: The requested object does no longer exist (410).
    Conflict:
      description: A conflict occurred with existing objects (duplicate key ec.).
        A 409 error.
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request was understood, but in incomplete or invalid and cannot
        be processed (400).
  securitySchemes:
    apikey:
      type: apiKey
      description: 'The Planner service requires an Api Key: x-gravitee-api-key in
        the header.'
      name: Api-key
      in: header
    Bearer-only:
      scheme: bearer
      type: http
      description: You need a valid access token.
