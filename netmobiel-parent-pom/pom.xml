<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.jboss</groupId>
		<artifactId>jboss-parent</artifactId>
		<version>35</version>
		<relativePath></relativePath>
	</parent>
	<groupId>eu.netmobiel</groupId>
	<artifactId>netmobiel-parent-pom</artifactId>
	<version>0.2.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>NetMobiel Parent POM</name>
	<description>The parent POM with project wide definitions for the NetMobiel Mobility-as-a-Service application.</description>
	<url>https://www.netmobiel.eu</url>
	<organization>
		<name>Saxion Hogescholen</name>
		<url>https://www.saxion.nl</url>
	</organization>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<root.dir>${project.basedir}</root.dir>
		<product.name>NetMobiel</product.name>
		<version.commons-collections4>4.4</version.commons-collections4>
		<version.commons-lang3>3.8.1</version.commons-lang3>
		<version.commons-text>1.6</version.commons-text>
		<version.dozer>6.5.0</version.dozer>
		<!-- <version.geotools>22.0</version.geotools> -->
		<version.hibernate-spatial>5.3.10.Final</version.hibernate-spatial>
		<version.hibernate-types>2.7.1</version.hibernate-types>
		<version.imp-sort.plugin>1.3.2</version.imp-sort.plugin>
		<version.jackson>2.9.9</version.jackson>
		<version.jscience>4.3.1</version.jscience>
		<!-- JTS is included in hibernate-spatial -->
		<version.jts>1.14.0</version.jts>
		<version.keycloak>6.0.1</version.keycloak>
		<version.log4j>1.2.17</version.log4j>
		<version.org.mapstruct>1.3.1.Final</version.org.mapstruct>
		<!--  Use exactly the same SLF4J as defined by JBOSS  -->
		<version.org.slf4j>1.7.22.jbossorg-1</version.org.slf4j>
		<version-openapi-generator>4.2.1</version-openapi-generator>

		<!-- A base list of dependency and plug-in version used in the various 
			quick starts. -->
		<version.wildfly.maven.plugin>2.0.0.Final</version.wildfly.maven.plugin>
		<version.org.wildfly.checkstyle-config>1.0.7.Final</version.org.wildfly.checkstyle-config>
		<!-- other plug-in versions -->
		<version.com.mycyla.license>3.0</version.com.mycyla.license>
		<version.checkstyle>8.5</version.checkstyle>
		<version.jaxws-tools-maven-plugin>1.2.3.Final</version.jaxws-tools-maven-plugin>

		<!-- Explicitly declaring the source encoding eliminates the following 
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Version of BOMs -->
		<version.server.bom>17.0.1.Final</version.server.bom>
		<linkXRef>false</linkXRef>
	</properties>

	<repositories>
		<repository>
			<id>jboss-public-repository</id>
			<name>JBoss Public</name>
			<url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<!-- importing the javaee8-with-tools BOM adds specs and other useful 
				artifacts as managed dependencies -->
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-javaee8-with-tools</artifactId>
				<version>${version.server.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-spatial</artifactId>
				<version>${version.hibernate-spatial}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>com.vladmihalcea</groupId>
				<artifactId>hibernate-types-52</artifactId>
				<version>${version.hibernate-types}</version>
			</dependency>
			<dependency>
				<groupId>com.vividsolutions</groupId>
				<artifactId>jts-core</artifactId>
				<scope>provided</scope>
				<version>${version.jts}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-jsr310</artifactId>
				<version>${version.jackson}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-collections4</artifactId>
				<version>${version.commons-collections4}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-text</artifactId>
				<version>${version.commons-text}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${version.commons-lang3}</version>
			</dependency>
			<dependency>
				<groupId>org.jscience</groupId>
				<artifactId>jscience</artifactId>
				<version>${version.jscience}</version>
			</dependency>
			<dependency>
				<groupId>com.github.dozermapper</groupId>
				<artifactId>dozer-core</artifactId>
				<version>${version.dozer}</version>
			</dependency>
			<!-- Another bean mapper, much faster than Dozer -->
			<dependency>
				<groupId>org.mapstruct</groupId>
				<artifactId>mapstruct</artifactId>
				<version>${version.org.mapstruct}</version>
			</dependency>

			<dependency>
				<groupId>eu.netmobiel</groupId>
				<artifactId>rideshare-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<!-- Keycloak adapter is added to WildFly instance. The library is therefore 
				provided. -->
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-core</artifactId>
				<version>${version.keycloak}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-authz-client</artifactId>
				<version>${version.keycloak}</version>
			</dependency>
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-adapter-core</artifactId>
				<version>${version.keycloak}</version>
			</dependency>
			<!-- Add the SPI as well, otherwise maven will complain -->
			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-adapter-spi</artifactId>
				<version>${version.keycloak}</version>
			</dependency>
	        <dependency>
	            <groupId>org.keycloak</groupId>
	            <artifactId>keycloak-jboss-adapter-core</artifactId>
				<version>${version.keycloak}</version>
	        </dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${version.log4j}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${version.org.slf4j}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${version.org.slf4j}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jul-to-slf4j</artifactId>
				<version>${version.org.slf4j}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- TEST Dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Use our own log4j for unit tests (and perhaps client side logging) -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- http://www.slf4j.org/legacy.html There are performance issues with jul-to-slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>
<!-- 		<dependency> -->
<!-- 	      <groupId>org.jboss.shrinkwrap.resolver</groupId> -->
<!-- 	      <artifactId>shrinkwrap-resolver-depchain</artifactId> -->
<!-- 	      <scope>test</scope> -->
<!-- 	      <type>pom</type> -->
<!-- 	    </dependency> -->
   	</dependencies>
	<build>
		<!-- Set the name of the artifacts. -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>${version.com.mycyla.license}</version>
				<configuration>
					<header>${basedir}/dist/license.txt</header>
					<aggregate>true</aggregate>
					<strictCheck>true</strictCheck>
					<excludes>
						<exclude>target/**</exclude>
						<exclude>.clover/**</exclude>
						<exclude>**/*.sql</exclude>
						<exclude>**/LICENSE*</exclude>
						<exclude>**/license*</exclude>
						<!-- Javascrip Libraries -->
						<exclude>**/jquery*</exclude>
						<exclude>**/angular*</exclude>
						<exclude>**/qunit*</exclude>
						<exclude>**/backbone*</exclude>
						<exclude>**/lodash*</exclude>
						<exclude>**/modernizr*</exclude>
						<exclude>**/yepnope*</exclude>
						<exclude>**/mobile-nav*</exclude>
						<!--Other libraries -->
						<exclude>**/*glyphicons*/**</exclude>
						<exclude>**/*cordova*/**</exclude>
					</excludes>
					<encoding>UTF-8</encoding>
					<headerDefinitions>
						<headerDefinition>dist/headerdefinition.xml</headerDefinition>
					</headerDefinitions>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.wildfly.plugins</groupId>
					<artifactId>wildfly-maven-plugin</artifactId>
					<version>${version.wildfly.maven.plugin}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-ejb-plugin</artifactId>
					<version>${version.ejb.plugin}</version>
					<configuration>
						<!-- Tell Maven we are using EJB -->
						<ejbVersion>3.2</ejbVersion>
					</configuration>
				</plugin>
				<!-- Checkstyle -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${version.checkstyle.plugin}</version>
					<configuration>
						<skip>true</skip>
						<configLocation>wildfly-checkstyle/checkstyle.xml</configLocation>
						<includeTestSourceDirectory>true</includeTestSourceDirectory>
						<sourceDirectories>
							<directory>${project.build.sourceDirectory}</directory>
						</sourceDirectories>
						<resourceIncludes>**/*.properties,**/*.xml</resourceIncludes>
						<includeTestResources>true</includeTestResources>
						<includeResources>true</includeResources>
						<consoleOutput>true</consoleOutput>
						<failsOnError>true</failsOnError>
						<failOnViolation>true</failOnViolation>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.wildfly.checkstyle</groupId>
							<artifactId>wildfly-checkstyle-config</artifactId>
							<version>${version.org.wildfly.checkstyle-config}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>check-style</id>
							<phase>compile</phase>
							<goals>
								<goal>checkstyle</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<systemProperties>
							<property>
								<name>java.util.logging.manager</name>
								<value>org.jboss.logmanager.LogManager</value>
							</property>
						</systemProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<configuration>
						<systemProperties>
							<property>
								<name>java.util.logging.manager</name>
								<value>org.jboss.logmanager.LogManager</value>
							</property>
<!-- 				             <property>  -->
<!-- 				               <name>java.util.logging.config.file</name> -->
<!-- 				               <value>src/test/resources/logging.properties</value> -->
<!-- 				             </property> -->
						</systemProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.openapitools</groupId>
					<artifactId>openapi-generator-maven-plugin</artifactId>
					<version>${version-openapi-generator}</version>
					<executions>
						<execution>
							<goals>
								<goal>generate</goal>
							</goals>
							<configuration>
								<generatorName>jaxrs-spec</generatorName>
								<configOptions>
									<sortParamsByRequiredFlag>false</sortParamsByRequiredFlag>
									<java8>true</java8>
									<interfaceOnly>true</interfaceOnly>
									<sourceFolder>src/main/java</sourceFolder>
									<useSwaggerAnnotations>false</useSwaggerAnnotations>
									<useBeanValidation>false</useBeanValidation>
									<dateLibrary>java8</dateLibrary>
									<withXml>false</withXml>
									<generatePom>false</generatePom>
									<disableHtmlEscaping>true</disableHtmlEscaping>
									<returnResponse>true</returnResponse>
									<!-- <additionalModelTypeAnnotations>JsonInclude(Include.NON_NULL)</additionalModelTypeAnnotations> -->
									<openApiSpecFileLocation>${project.build.directory}/generated-sources/openapi/src/main/resources/META-INF</openApiSpecFileLocation>
								</configOptions>
								<configHelp>false</configHelp>
								<skipValidateSpec>false</skipValidateSpec>
								<generateApiTests>false</generateApiTests>
								<generateModels>true</generateModels>
								<generateModelTests>false</generateModelTests>
								<generateModelDocumentation>true</generateModelDocumentation>
								<generateSupportingFiles>false</generateSupportingFiles>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>net.revelc.code</groupId>
					<artifactId>impsort-maven-plugin</artifactId>
					<version>${version.imp-sort.plugin}</version>
					<configuration>
						<groups>java.,javax.,org.,com.</groups>
						<staticGroups>java,*</staticGroups>
						<removeUnused>true</removeUnused>
						<directories>target/generated-sources/openapi/src/main/java</directories>
					</configuration>
					<executions>
						<execution>
							<id>remove-obsolete-imports</id>
							<goals>
								<goal>sort</goal><!-- runs at process-sources phase by default -->
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.bsc.maven</groupId>
					<artifactId>maven-processor-plugin</artifactId>
					<executions>
						<execution>
							<goals>
								<goal>process</goal>
							</goals>
							<phase>generate-sources</phase>
							<configuration>
								<!-- suppress java.annotation -->
								<!-- <compilerArguments>-AaddGeneratedAnnotation=false</compilerArguments> -->
								<processors>
									<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
								</processors>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<!-- <dependency> -->
						<!-- <groupId>org.hibernate.orm</groupId> -->
						<!-- <artifactId>hibernate-jpamodelgen</artifactId> -->
						<!-- <scope>provided</scope> -->
						<!-- </dependency> -->
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>only-eclipse</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>
													com.redhat.rcm.maven.plugin
												</groupId>
												<artifactId>
													buildmetadata-maven-plugin
												</artifactId>
												<versionRange>
													[1.7.0,)
												</versionRange>
												<goals>
													<goal>
														provide-buildmetadata
													</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>
													org.commonjava.maven.plugins
												</groupId>
												<artifactId>
													project-sources-maven-plugin
												</artifactId>
												<versionRange>
													[0.3,)
												</versionRange>
												<goals>
													<goal>archive</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>
													org.jboss.ws.plugins
												</groupId>
												<artifactId>
													jaxws-tools-maven-plugin
												</artifactId>
												<versionRange>
													[1.2.0.Final,)
												</versionRange>
												<goals>
													<goal>wsconsume</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss EAP instance. This profile will start a new JBoss EAP instance, and 
				execute the test, shutting it down when done. Run with: mvn clean verify 
				-Parq-managed -->
			<id>arq-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.failsafe.plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss EAP instance. Run with: mvn clean verify -Parq-remote -->
			<id>arq-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.failsafe.plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>