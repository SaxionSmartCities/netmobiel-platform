{
  "openapi": "3.0.0",
  "info": {
    "title": "Geocoding and Search API v7",
    "version": "7.85",
    "description": "This document describes the Geocoding and Search API.",
    "x-document-meta-data": {
      "copyright": "Â© 2022 HERE Europe B.V.",
      "document-id": "db336425-079c-4c65-bd90-5d4bfaf4c4e9",
      "date-created": "2022-05-25T16:14:29+00:00"
    }
  },
  "security": [
    {
      "Bearer": [

      ]
    },
    {
      "ApiKey": [

      ]
    }
  ],
  "components": {
    "securitySchemes": {
      "Bearer": {
        "description": "A token obtained from a separate endpoint using client credentials and an OAuth 1.0a HMAC-SHA256 signed request.\nFor more information on how to get a bearer token, see the\n[Identity & Access Management Guide](https://developer.here.com/documentation/identity-access-management/dev_guide/index.html).\n",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ApiKey": {
        "description": "A key generated specifically to authenticate API requests.\nFor more information on how to get an API key, see the\n[Identity & Access Management Guide](https://developer.here.com/documentation/identity-access-management/dev_guide/index.html).\n",
        "type": "apiKey",
        "name": "apiKey",
        "in": "query"
      }
    },
    "parameters": {
      "atBrowse": {
        "name": "at",
        "description": "Specify the center of the search context expressed as coordinates\n\nRequired parameter for endpoints that are expected to rank results by distance from the explicitly\n specified search center\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "52.5308,13.3856"
        }
      },
      "id": {
        "name": "id",
        "description": "Location ID, which is the ID of a result item eg. of a Discover request",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "here:pds:place:276u33db-8097f3194e4b411081b761ea9a366776"
        }
      },
      "qAutocomplete": {
        "name": "q",
        "description": "Enter a free-text query\n\nExamples:\n * `ber`, `berl`, `berli`, ...\n * `berlin+p`, `berlin+paris`, `berlin+parise`, ...\n * `berlin+pariser+20`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results._\n",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Berlin Pariser 20"
        }
      },
      "qAutosuggest": {
        "name": "q",
        "description": "Enter a free-text query\n\nExamples:\n * `res`, `rest`, `resta`, `restau`, ...\n * `berlin+bran`, `berlin+brand`, `berlin+branden`, ...\n * `New+Yok+Giants`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Eismieze Berlin"
        }
      },
      "qDiscover": {
        "name": "q",
        "description": "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n _Note: Whitespace, urls, email addresses, or other out-of-scope queries will yield no results.\n",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "Eismieze Berlin"
        }
      },
      "atAutocompleteGeocode": {
        "name": "at",
        "description": "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "atAutosuggestDiscover": {
        "name": "at",
        "description": "Specify the center of the search context expressed as coordinates\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "52.5308,13.3856"
        }
      },
      "atRevgeocode": {
        "name": "at",
        "description": "Specify the center of the search context expressed as coordinates.\n\nFormat: `{latitude},{longitude}`\n\nType: `{decimal},{decimal}`\n\nExample: `-13.163068,-72.545128` (Machu Picchu Mountain, Peru)\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n\n * Parameters \"at\" and \"in=circle\" are mutually exclusive. Only one of them is allowed.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "52.5308,13.3856"
        }
      },
      "categories": {
        "name": "categories",
        "description": "Category filter consisting of a comma-separated list of category-IDs for Categories defined in the HERE Places Category System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned categories that match any of the requested categories are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a category ID causes that category to be excluded from the results.\nIt is possible to mix excluded and included categories in the request - e.g. searching for places that are restaurants but not fast food restaurants.\nAn exclusion will always win over an inclusion.\n",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "chains": {
        "name": "chains",
        "description": "Chain filter consisting of a comma-separated list of chain-IDs for Chains defined in the HERE Places Chain System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned chains that match any of the requested chains are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a chain ID causes that chain to be excluded from the results.\nIt is possible to mix excluded and included chains in the request - e.g. searching for places that are amazon but not wholefoods.\nAn exclusion will always win over an inclusion.\n",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "foodTypes": {
        "name": "foodTypes",
        "description": "FoodType filter consisting of a comma-separated list of cuisine-IDs for FoodTypes defined in the HERE Places Cuisine System, described\nin the Appendix to the HERE Search Developer Guide. Places with any assigned foodTypes that match any of the requested foodTypes are\nincluded in the response.\n\nAn exclamation mark \"`!`\" in front of a cuisine ID causes that foodType to be excluded from the results.\nIt is possible to mix excluded and included foodTypes in the request - e.g. searching for places that serve italian but not chinese.\nAn exclusion will always win over an inclusion.\n",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "inAutocompleteGeocode": {
        "name": "in",
        "description": "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "inAutosuggestDiscover": {
        "name": "in",
        "description": "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"at\", \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n\n  * One of \"at\", \"in=circle\" or \"in=bbox\" is required.\n\n * The \"in=countryCode\" parameter must be accompanied by exactly one of \"at\", \"in=circle\" or \"in=bbox\".\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "inBrowse": {
        "name": "in",
        "description": "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a country (or multiple countries), provided as comma-separated [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country codes\n\n   The country codes are to be provided in all uppercase.\n\n   Format: `countryCode:{countryCode}[,{countryCode}]*`\n\n   Examples:\n    * `countryCode:USA`\n    * `countryCode:CAN,MEX,USA`\n\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\n * a bounding box, provided as _west longitude_, _south latitude_, _east longitude_, _north latitude_\n\n   Format: `bbox:{west longitude},{south latitude},{east longitude},{north latitude}`\n\n   Example: `bbox:13.08836,52.33812,13.761,52.6755`\n\n\nThe following constraints apply:\n\n * Parameters \"in=circle\" and \"in=bbox\" are mutually exclusive. Only one of them is allowed.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "inRevgeocode": {
        "name": "in",
        "description": "Search within a geographic area. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA geographic area can be\n\n * a circular area, provided as latitude, longitude, and radius (in meters)\n\n   Format: `circle:{latitude},{longitude};r={radius}`\n\n   Type: `circle:{decimal},{decimal};r={integer}`\n\n   Example: `circle:52.53,13.38;r=10000`\n\n\nThe following constraints apply:\n\n * Either \"at\" or \"in=circle\" is required.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "limitAutocomplete": {
        "name": "limit",
        "description": "Maximum number of results to be returned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 20,
          "default": 5
        }
      },
      "limitAutosuggestBrowseDiscoverGeocode": {
        "name": "limit",
        "description": "Maximum number of results to be returned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "limitRevgeocode": {
        "name": "limit",
        "description": "Maximum number of results to be returned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100,
          "default": 1
        }
      },
      "name": {
        "name": "name",
        "description": "Full-text filter on POI names/titles. Results with a partial match on the name parameter are included in the response.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "qGeocode": {
        "name": "q",
        "description": "Enter a free-text query\n\nExamples:\n * `125, Berliner, berlin`\n * `Beacon, Boston, Hospital`\n * `Schnurrbart German Pub and Restaurant, Hong Kong`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "InvalidenstraÃe 116 Berlin"
        }
      },
      "qq": {
        "name": "qq",
        "description": "Enter a qualified query. A qualified query is similar to a free-text query, but in a structured manner.\n It can take multiple _sub-parameters_, separated by semicolon, allowing to specify different aspects of a query.\n\nCurrently supported _sub-parameters_ are `country`, `state`, `county`, `city`, `district`, `street`,\n `houseNumber`, and `postalCode`.\n\nFormat: `{sub-parameter}={string}[;{sub-parameter}={string}]*`\n\nExamples:\n * `city=Berlin;country=Germany;street=Friedrichstr;houseNumber=20`\n * `city=Berlin;country=Germany`\n * `postalCode=10969`\n\n_Note: Either `q` or `qq`-parameter is required on this endpoint. Both parameters can be provided in the same request._\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "route": {
        "name": "route",
        "description": "BETA: Select within a geographic corridor. This is a hard filter. Results will be returned if they are located within the specified area.\n\nA `route` is defined by a [Flexible Polyline Encoding](https://github.com/heremaps/flexible-polyline),\n followed by an optional width, represented by a sub-parameter \"w\".\n\nFormat: `{route};w={width}`\n\nIn regular expression syntax, the values of `route` look like:\n\n`[a-zA-Z0-9_-]+(;w=\\d+)?`\n\n\"[a-zA-Z0-9._-]+\" is the encoded flexible polyline.\n\n\"w=\\d+\" is the optional width. The width is specified in meters from the center of the path. If no width is provided, the default is 1000 meters.\n\nType: `{Flexible Polyline Encoding};w={integer}`\n\nThe following constraints apply:\n * A `route` MUST NOT contain more than 2000 points.\n\nExamples:\n * `BFoz5xJ67i1B1B7PzIhaxL7Y`\n * `BFoz5xJ67i1B1B7PzIhaxL7Y;w=5000`\n * `BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC;w=2000`\n\nNote: The last example above can be decoded (using the Python class [here](https://github.com/heremaps/flexible-polyline/tree/master/python) as follows:\n\n```\n>>> import flexpolyline\n>>> polyline = 'BlD05xgKuy2xCCx9B7vUCl0OhnRC54EqSCzpEl-HCxjD3pBCiGnyGCi2CvwFCsgD3nDC4vB6eC'\n>>> flexpolyline.decode(polyline)\n[(52.51994, 13.38663, 1.0), (52.51009, 13.28169, 2.0), (52.43518, 13.19352, 3.0), (52.41073, 13.19645, 4.0), (52.38871, 13.15578, 5.0), (52.37278, 13.1491, 6.0), (52.37375, 13.11546, 7.0), (52.38752, 13.08722, 8.0), (52.40294, 13.07062, 9.0), (52.41058, 13.07555, 10.0)]\n```\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "termsLimit": {
        "name": "termsLimit",
        "description": "Maximum number of Query Terms Suggestions to be returned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 10
        }
      },
      "types": {
        "name": "types",
        "description": "BETA: Limit the result items to the specified types. Currently supported values of the type filter for Autocomplete:\n * `city` - restricting results to result type `locality` and locality type `city`\n * `postalCode` - restricting results to result type `locality` and locality type `postalCode`,\n * `area` - restricting results to result types: `locality` or `administrativeArea` including all the sub-types\n\nProvide one of the supported values or a comma separated list.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "area",
              "city",
              "postalCode"
            ]
          }
        }
      },
      "langAutocomplete": {
        "name": "lang",
        "description": "Select the preferred response language for result rendering from a list of BCP47 compliant Language Codes.\nThe autocomplete endpoint tries to detect the query language based on matching name variants and then chooses the same language for the response.\n\nTherefore the end-user can see and recognize all the entered terms in the same language as in the query.\nThe specified preferred language is used only for not matched address tokens and for matched address tokens in case of ambiguity\n",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode": {
        "name": "lang",
        "description": "Select the language to be used for result rendering from a list of [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) compliant language codes.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "politicalView": {
        "name": "politicalView",
        "description": "Toggle the political view.\n\nThis parameter accepts single ISO 3166-1 alpha-3 country code. The country codes are to be provided in all uppercase.\n\nCurrently the only supported political views are:\n * RUS expressing the Russian view on Crimea\n * SRB expressing the Serbian view on Kosovo, Vukovar and Sarengrad Islands\n * MAR expressing the Moroccan view on Western Sahara\n * SUR Suriname view on Courantyne Headwaters and Lawa Headwaters\n * KEN Kenya view on Ilemi Triangle\n * TZA Tanzania view on Lake Malawi\n * URY Uruguay view on Rincon de Artigas\n * EGY Egypt view on Bir Tawil\n * SDN Sudan view on Halaib Triangle\n * SYR Syria view on Golan Heights\n * ARG Argentina view on Southern Patagonian Ice Field and Tierra Del Fuego, including Falkland Islands, South Georgia and South Sandwich Islands\n * IND Indian View on Gilgit-Baltistan\n * PAK Pakistan View on Jammu and Kashmir and Junagadh Area\n\nFor any valid 3 letter country code, for which GS7 does not have dedicated political view, it falls back to the default view.\n\nFor not accepted values of the politicalView parameter the GS7 responds with \"400\" error code.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "showAutocomplete": {
        "name": "show",
        "description": "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of accepted values:\n\n'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "streetInfo"
            ]
          }
        }
      },
      "showAutosuggestBrowseDiscover": {
        "name": "show",
        "description": "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of accepted values:\n\n'phonemes': Renders phonemes for address and place names into the results.\n\n'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n\nBETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "phonemes",
              "streetInfo",
              "tz"
            ]
          }
        }
      },
      "showGeocode": {
        "name": "show",
        "description": "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of accepted values:\n\n'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n\n'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n\nBETA: 'parsing'\n\nBETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "countryInfo",
              "streetInfo",
              "parsing",
              "tz"
            ]
          }
        }
      },
      "showLookup": {
        "name": "show",
        "description": "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of accepted values:\n\n'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n\n'phonemes': Renders phonemes for address and place names into the results.\n\n'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n\nBETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "countryInfo",
              "phonemes",
              "streetInfo",
              "tz"
            ]
          }
        }
      },
      "showRevgeocode": {
        "name": "show",
        "description": "Select additional fields to be rendered in the response.\nPlease note that some of the fields involve additional webservice calls and can increase the overall response time.\n\nThe value is a comma-separated list of the sections to be enabled.\nFor some sections there is a long and a short ID.\n\nDescription of accepted values:\n\n'countryInfo': For each result item renders additional block with the country info, such as [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) and [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code.\n\n'streetInfo': For each result item renders additional block with the street name decomposed into its parts like the base name, the street type, etc.\n\nBETA: 'tz': Renders result items with additional time zone information. Please note that this may impact latency significantly.",
        "in": "query",
        "explode": false,
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "countryInfo",
              "streetInfo",
              "tz"
            ]
          }
        }
      },
      "X-Request-ID": {
        "name": "X-Request-ID",
        "description": "Used to correlate requests with their responses within a customer's application, for logging and error reporting.\n\nFormat: Free string, but a valid UUIDv4 is recommended.",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "OpenSearchGeocodeResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeocodeResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria."
          }
        }
      },
      "GeocodeResultItem": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "houseNumberFallback": {
            "type": "boolean",
            "description": "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "scoring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Scoring"
              }
            ],
            "description": "Indicates for each result how good the result matches to the original query. This can be used by the customer application to accept or reject the results depending on how \"expensive\" is the mistake for their use case"
          },
          "parsing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Parsing"
              }
            ],
            "description": "BETA - Parsed terms and their positions in the input query (only rendered if 'show=parsing' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          },
          "countryInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryInfo"
              }
            ],
            "description": "Country Details (only rendered if 'show=countryInfo' is provided.)"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Assembled address value built out of the address components according to the regional postal rules. These are the same rules for all endpoints. It may not include all the input terms. For example: \"SchulstraÃe 4, 32547 Bad Oeynhausen, Germany\""
          },
          "countryCode": {
            "type": "string",
            "description": "A three-letter country code. For example: \"DEU\""
          },
          "countryName": {
            "type": "string",
            "description": "The localised country name. For example: \"Deutschland\""
          },
          "stateCode": {
            "type": "string",
            "description": "A state code or state name abbreviation â country specific. For example, in the United States it is the two letter state abbreviation: \"CA\" for California."
          },
          "state": {
            "type": "string",
            "description": "The state division of a country. For example: \"North Rhine-Westphalia\""
          },
          "countyCode": {
            "type": "string",
            "description": "A county code or county name abbreviation â country specific. For example, for Italy it is the province abbreviation: \"RM\" for Rome."
          },
          "county": {
            "type": "string",
            "description": "A division of a state; typically, a secondary-level administrative division of a country or equivalent."
          },
          "city": {
            "type": "string",
            "description": "The name of the primary locality of the place. For example: \"Bad Oyenhausen\""
          },
          "district": {
            "type": "string",
            "description": "A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood. For example: \"Bad Oyenhausen\""
          },
          "subdistrict": {
            "type": "string",
            "description": "A subdivision of a district. For example: \"Minden-LÃ¼bbecke\""
          },
          "street": {
            "type": "string",
            "description": "Name of street. For example: \"Schulstrasse\""
          },
          "block": {
            "type": "string",
            "description": "Name of block."
          },
          "subblock": {
            "type": "string",
            "description": "Name of sub-block."
          },
          "postalCode": {
            "type": "string",
            "description": "An alphanumeric string included in a postal address to facilitate mail sorting, such as post code, postcode, or ZIP code. For example: \"32547\""
          },
          "houseNumber": {
            "type": "string",
            "description": "House number. For example: \"4\""
          },
          "building": {
            "type": "string",
            "description": "Name of building."
          }
        }
      },
      "DisplayResponseCoordinate": {
        "type": "object",
        "required": [
          "lat",
          "lng"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the address. For example: \"52.19404\""
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the address. For example: \"8.80135\""
          }
        }
      },
      "AccessResponseCoordinate": {
        "type": "object",
        "required": [
          "lat",
          "lng"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the address. For example: \"52.19404\""
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the address. For example: \"8.80135\""
          }
        }
      },
      "MapView": {
        "type": "object",
        "required": [
          "west",
          "south",
          "east",
          "north"
        ],
        "properties": {
          "west": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the western-side of the box. For example: \"8.80068\""
          },
          "south": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the southern-side of the box. For example: \"52.19333\""
          },
          "east": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the eastern-side of the box. For example: \"8.8167\""
          },
          "north": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the northern-side of the box. For example: \"52.19555\""
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier number for an associated category. For example: \"900-9300-0000\""
          },
          "name": {
            "type": "string",
            "description": "Name of the place category in the result item language."
          },
          "primary": {
            "type": "boolean",
            "description": "Whether or not it is a primary category. This field is visible only when the value is 'true'."
          }
        }
      },
      "TimeZoneInfo": {
        "type": "object",
        "required": [
          "name",
          "utcOffset"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the time zone as defined in the [tz database](https://en.wikipedia.org/wiki/Tz_database). For example: \"Europe/Berlin\""
          },
          "utcOffset": {
            "type": "string",
            "description": "The UTC offset for this time zone at request time. For example \"+02:00\""
          }
        }
      },
      "Scoring": {
        "type": "object",
        "properties": {
          "queryScore": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the input matches the returned address. It is equal to 1 if all input tokens are recognized and matched."
          },
          "fieldScore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldScore"
              }
            ],
            "description": "Indicates how good the individual result fields match to the corresponding part of the query. Is included only for the result fields that are actually matched to the query."
          }
        }
      },
      "FieldScore": {
        "type": "object",
        "properties": {
          "country": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result country name or [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input."
          },
          "countryCode": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result [ISO 3166-1 alpha-3] country code matches to the freeform or qualified input."
          },
          "state": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result state name matches to the freeform or qualified input."
          },
          "stateCode": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result state code matches to the freeform or qualified input."
          },
          "county": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result county name matches to the freeform or qualified input."
          },
          "countyCode": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result county code matches to the freeform or qualified input."
          },
          "city": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result city name matches to the freeform or qualified input."
          },
          "district": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result district name matches to the freeform or qualified input."
          },
          "subdistrict": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result sub-district name matches to the freeform or qualified input."
          },
          "streets": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "Indicates how good the result street names match to the freeform or qualified input. If the input contains multiple street names, the field score is calculated and returned for each of them individually."
          },
          "block": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result block name matches to the freeform or qualified input."
          },
          "subblock": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result sub-block name matches to the freeform or qualified input."
          },
          "houseNumber": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result house number matches to the freeform or qualified input. It may happen, that the house number, which one is looking for, is not yet in the map data. For such cases, the /geocode returns the nearest known house number on the same street. This represents the numeric difference between the requested and the returned house numbers."
          },
          "postalCode": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result postal code matches to the freeform or qualified input."
          },
          "building": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result building name matches to the freeform or qualified input."
          },
          "unit": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result unit (such as a micro point address) matches to the freeform or qualified input."
          },
          "placeName": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result place name matches to the freeform or qualified input."
          },
          "ontologyName": {
            "type": "number",
            "format": "double",
            "description": "Indicates how good the result ontology name matches to the freeform or qualified input."
          }
        }
      },
      "Parsing": {
        "type": "object",
        "properties": {
          "placeName": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Place name matches"
          },
          "country": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Country matches"
          },
          "state": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "State matches"
          },
          "county": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "County matches"
          },
          "city": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "City matches"
          },
          "district": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "District matches"
          },
          "subdistrict": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Subdistrict matches"
          },
          "street": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Street matches"
          },
          "block": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Block matches"
          },
          "subblock": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Subblock matches"
          },
          "houseNumber": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "HouseNumber matches"
          },
          "postalCode": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "PostalCode matches"
          },
          "building": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Building matches"
          },
          "secondaryUnits": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "secondaryUnits matches"
          },
          "ontologyName": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchInfo"
                }
              ]
            },
            "description": "Ontology name matches"
          }
        }
      },
      "MatchInfo": {
        "type": "object",
        "required": [
          "start",
          "end",
          "value"
        ],
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "First index of the matched range (0-based indexing, inclusive)"
          },
          "end": {
            "type": "integer",
            "format": "int32",
            "description": "One past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term"
          },
          "value": {
            "type": "string",
            "description": "Matched term in the input string"
          },
          "qq": {
            "type": "string",
            "enum": [
              "country",
              "state",
              "county",
              "city",
              "district",
              "street",
              "houseNumber",
              "postalCode"
            ],
            "description": "The matched qualified query field type. If this is not returned, then matched value refers to the freetext query"
          }
        }
      },
      "StreetInfo": {
        "type": "object",
        "properties": {
          "baseName": {
            "type": "string",
            "description": "Base name part of the street name."
          },
          "streetType": {
            "type": "string",
            "description": "Street type part of the street name."
          },
          "streetTypePrecedes": {
            "type": "boolean",
            "description": "Defines if the street type is before or after the base name."
          },
          "streetTypeAttached": {
            "type": "boolean",
            "description": "Defines if the street type is attached or unattached to the base name."
          },
          "prefix": {
            "type": "string",
            "description": "A prefix is a directional identifier that precedes, but is not included in, the base name of a road."
          },
          "suffix": {
            "type": "string",
            "description": "A suffix is a directional identifier that follows, but is not included in, the base name of a road."
          },
          "direction": {
            "type": "string",
            "description": "Indicates the official directional identifiers assigned to highways, typically either \"North/South\" or \"East/West\""
          },
          "language": {
            "type": "string",
            "description": "BCP 47 compliant language code"
          }
        }
      },
      "CountryInfo": {
        "type": "object",
        "properties": {
          "alpha2": {
            "type": "string",
            "description": "[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code"
          },
          "alpha3": {
            "type": "string",
            "description": "[ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) country code"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "status",
          "title",
          "correlationId",
          "requestId"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "The HTTP status code"
          },
          "title": {
            "type": "string",
            "description": "Human-readable error description"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "cause": {
            "type": "string",
            "description": "Human-readable explanation for the error"
          },
          "action": {
            "type": "string",
            "description": "Human-readable action for the user"
          },
          "correlationId": {
            "type": "string",
            "description": "Auto-generated ID univocally identifying this request"
          },
          "requestId": {
            "type": "string",
            "description": "Request identifier provided by the user"
          }
        }
      },
      "OpenSearchSearchResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OneboxSearchResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria."
          }
        }
      },
      "OneboxSearchResultItem": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "ontologyId": {
            "type": "string",
            "description": "Related ontology ID"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "excursionDistance": {
            "type": "integer",
            "format": "int64",
            "description": "BETA - Two times the distance from the polyline to this result item in meters while searching along the route"
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "chains": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chain"
                }
              ]
            },
            "description": "The list of chains assigned to this place."
          },
          "references": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SupplierReference"
                }
              ]
            },
            "description": "The list of supplier references available for this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "houseNumberFallback": {
            "type": "boolean",
            "description": "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "contacts": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactInformation"
                }
              ]
            },
            "description": "Contact information like phone, email, WWW."
          },
          "openingHours": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OpeningHours"
                }
              ]
            },
            "description": "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "extended": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedAttribute"
              }
            ],
            "description": "Extended attributes section to contain detailed information for specific result types."
          },
          "phonemes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonemesSection"
              }
            ],
            "description": "Phonemes for address and place names. (rendered only if 'show=phonemes' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          }
        }
      },
      "Chain": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier number for an associated chain. For example: \"272\""
          }
        }
      },
      "SupplierReference": {
        "type": "object",
        "required": [
          "supplier",
          "id"
        ],
        "properties": {
          "supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Supplier"
              }
            ],
            "description": "Information about the supplier of this reference."
          },
          "id": {
            "type": "string",
            "description": "Identifier of the place as provided by the supplier."
          }
        }
      },
      "Supplier": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "enum": [
              "core",
              "yelp",
              "tripadvisor",
              "parkopedia",
              "venues",
              "vinfast",
              "ryd",
              "booking.com",
              "nsr"
            ],
            "description": "An identifier for the supplier."
          }
        }
      },
      "ContactInformation": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "mobile": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "tollFree": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "fax": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "www": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "email": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          }
        }
      },
      "Contact": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "Optional label for the contact string, such as \"Customer Service\" or \"Pharmacy Fax\"."
          },
          "value": {
            "type": "string",
            "description": "Contact information, as specified by the contact type."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of place categories this contact refers to."
          }
        }
      },
      "OpeningHours": {
        "type": "object",
        "required": [
          "text",
          "structured"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of place categories, this set of opening hours refers to."
          },
          "text": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isOpen": {
            "type": "boolean"
          },
          "structured": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StructuredOpeningHours"
                }
              ]
            },
            "description": "List of iCalender-based structured representations of opening hours"
          }
        }
      },
      "StructuredOpeningHours": {
        "type": "object",
        "required": [
          "start",
          "duration",
          "recurrence"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "String with a modified [iCalendar DATE-TIME](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.5) value.\nThe date part is omitted, values starts with the time section maker \\\"T\\\". Example: T132000"
          },
          "duration": {
            "type": "string",
            "description": "String with an [iCalendar DURATION](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.6) value.\nA closed day has the value PT00:00M"
          },
          "recurrence": {
            "type": "string",
            "description": "String with a [RECUR](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10) rule. Note that, in contrast to the RFC, the assignment operator is a colon `:` and not an equal sign `=`."
          }
        }
      },
      "ExtendedAttribute": {
        "type": "object",
        "properties": {
          "evStation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvChargingAttributes"
              }
            ],
            "description": "EV charging pool information"
          }
        }
      },
      "EvChargingAttributes": {
        "type": "object",
        "properties": {
          "connectors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EvConnector"
                }
              ]
            },
            "description": "List of EV pool groups of connectors. Each group is defined by a common charging connector type and max power level. The numberOfConnectors field contains the number of connectors in the group."
          },
          "totalNumberOfConnectors": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of charging connectors in the EV charging pool"
          }
        }
      },
      "EvConnector": {
        "type": "object",
        "properties": {
          "supplierName": {
            "type": "string",
            "description": "The EV charge point operator"
          },
          "connectorType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvNameId"
              }
            ],
            "description": "Id and name element pair representing the connector type in the EV pool group.\nFor more information on the current connector types, see the [connectorTypes](https://developer.here.com/documentation/charging-stations/dev_guide/topics/resource-type-connector-types.html) values in the HERE EV Charge Points API."
          },
          "powerFeedType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvNameId"
              }
            ],
            "description": "Details on type of power feed with respect to [SAE J1772](https://en.wikipedia.org/wiki/SAE_J1772#Charging) standard."
          },
          "maxPowerLevel": {
            "type": "number",
            "format": "double",
            "description": "Maximum charge power (in kilowatt) of connectors in connectors group."
          },
          "chargingPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvChargingPoint"
              }
            ],
            "description": "Connectors group additional charging information"
          }
        }
      },
      "EvNameId": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Any string value"
          },
          "id": {
            "type": "string",
            "description": "Unique ID"
          }
        }
      },
      "EvChargingPoint": {
        "type": "object",
        "properties": {
          "numberOfConnectors": {
            "type": "integer",
            "format": "int32",
            "description": "Number of physical connectors in the connectors group"
          },
          "chargeMode": {
            "type": "string",
            "description": "Charge mode of the connectors group. For more information, check the [IEC-61851-1](https://en.wikipedia.org/w/index.php?title=Charging_station&oldid=1013010605#IEC-61851-1_Charging_Modes) standard."
          },
          "voltsRange": {
            "type": "string",
            "description": "Voltage provided by the connectors group",
            "example": "100-120V AC"
          },
          "phases": {
            "type": "integer",
            "format": "int32",
            "description": "Number of phases provided by the connectors group"
          },
          "ampsRange": {
            "type": "string",
            "description": "Amperage provided by the connectors group",
            "example": "12A-80A"
          }
        }
      },
      "PhonemesSection": {
        "type": "object",
        "properties": {
          "placeName": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the name of the place."
          },
          "countryName": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the county name."
          },
          "state": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the state name."
          },
          "county": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the county name."
          },
          "city": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the city name."
          },
          "district": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the district name."
          },
          "subdistrict": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the subdistrict name."
          },
          "street": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the street name."
          },
          "block": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the block."
          },
          "subblock": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phoneme"
                }
              ]
            },
            "description": "Phonemes for the sub-block."
          }
        }
      },
      "Phoneme": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string",
            "description": "The actual phonetic transcription in the NT-SAMPA format."
          },
          "language": {
            "type": "string",
            "description": "The [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) language code."
          },
          "preferred": {
            "type": "boolean",
            "description": "Whether or not it is the preferred phoneme."
          }
        }
      },
      "OpenSearchAutosuggestResponse": {
        "type": "object",
        "required": [
          "items",
          "queryTerms"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AutosuggestEntityResultItem"
                },
                {
                  "$ref": "#/components/schemas/AutosuggestQueryResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria. JR: integated AutosuggestQueryResultItem into AutosuggestEntityResultItem"
          },
          "queryTerms": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryTermResultItem"
                }
              ]
            },
            "description": "Suggestions for refining individual query terms"
          }
        }
      },
      "AutosuggestEntityResultItem": {
        "type": "object",
        "required": [
          "title",
          "address",
          "resultType"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "ontologyId": {
            "type": "string",
            "description": "Related ontology ID"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place",
              "categoryQuery",
              "chainQuery"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "excursionDistance": {
            "type": "integer",
            "format": "int64",
            "description": "BETA - Two times the distance from the polyline to this result item in meters while searching along the route"
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "chains": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chain"
                }
              ]
            },
            "description": "The list of chains assigned to this place."
          },
          "references": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SupplierReference"
                }
              ]
            },
            "description": "The list of supplier references available for this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "contacts": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactInformation"
                }
              ]
            },
            "description": "BETA - Contact information like phone, email, WWW."
          },
          "openingHours": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OpeningHours"
                }
              ]
            },
            "description": "BETA - A list of hours during which the place is open for business."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "highlights": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TitleAndAddressHighlighting"
              }
            ],
            "description": "Describes how the parts of the response element matched the input query"
          },
          "phonemes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonemesSection"
              }
            ],
            "description": "Phonemes for address and place names. (rendered only if 'show=phonemes' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          },
          "href": {
            "type": "string",
            "description": "URL of the follow-up query"
          }
        }
      },
      "TitleAndAddressHighlighting": {
        "type": "object",
        "properties": {
          "title": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Range"
                }
              ]
            },
            "description": "Ranges of indexes that matched in the title attribute"
          }
        }
      },
      "Range": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "first index of the matched range (0-based indexing, inclusive)"
          },
          "end": {
            "type": "integer",
            "format": "int32",
            "description": "one past the last index of the matched range (0-based indexing, exclusive); The difference between end and start gives the length of the term"
          }
        }
      },
      "AutosuggestQueryResultItem": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "resultType": {
            "type": "string",
            "enum": [
              "categoryQuery",
              "chainQuery"
            ]
          },
          "href": {
            "type": "string",
            "description": "URL of the follow-up query"
          },
          "highlights": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TitleHighlighting"
              }
            ],
            "description": "Describes how the parts of the response element matched the input query"
          }
        }
      },
      "TitleHighlighting": {
        "type": "object",
        "properties": {
          "title": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Range"
                }
              ]
            },
            "description": "Ranges of indexes that matched in the title attribute"
          }
        }
      },
      "QueryTermResultItem": {
        "type": "object",
        "required": [
          "term",
          "replaces",
          "start",
          "end"
        ],
        "properties": {
          "term": {
            "type": "string",
            "description": "The term that will be suggested to the user."
          },
          "replaces": {
            "type": "string",
            "description": "The sub-string of the original query that is replaced by this Query Term."
          },
          "start": {
            "type": "integer",
            "format": "int32",
            "description": "The start index in codepoints (inclusive) of the text replaced in the original query."
          },
          "end": {
            "type": "integer",
            "format": "int32",
            "description": "The end index in codepoints (exclusive) of the text replaced in the original query."
          }
        }
      },
      "OpenSearchAutocompleteResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AutocompleteResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria."
          }
        }
      },
      "AutocompleteResultItem": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The unified display name of this result item. The result title is composed so that the customer application can use it to render the suggestions with highlighting. It is build in a unified way for all the countries starting from the country name and down to the address line. It is build out of the address components that are important for the end-user to recognize and eventually to choose a result and includes all the input terms. For example: \"Germany, 32547, Bad Oeynhausen, SchulstraÃe 4\""
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "language": {
            "type": "string",
            "description": "The preferred language of address elements in the result."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Detailed address of the result item."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "highlights": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TitleAndAddressHighlighting"
              }
            ],
            "description": "Describes how the parts of the response element matched the input query"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          }
        }
      },
      "OpenSearchBrowseResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrowseResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria."
          }
        }
      },
      "BrowseResultItem": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "houseNumberFallback": {
            "type": "boolean",
            "description": "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "excursionDistance": {
            "type": "integer",
            "format": "int64",
            "description": "BETA - Two times the distance from the polyline to this result item in meters while searching along the route"
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "chains": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chain"
                }
              ]
            },
            "description": "The list of chains assigned to this place."
          },
          "references": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SupplierReference"
                }
              ]
            },
            "description": "The list of supplier references available for this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "contacts": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactInformation"
                }
              ]
            },
            "description": "Contact information like phone, email, WWW."
          },
          "openingHours": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OpeningHours"
                }
              ]
            },
            "description": "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "extended": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedAttribute"
              }
            ],
            "description": "Extended attributes section to contain detailed information for specific result types."
          },
          "phonemes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonemesSection"
              }
            ],
            "description": "Phonemes for address and place names. (rendered only if 'show=phonemes' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          }
        }
      },
      "OpenSearchReverseGeocodeResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReverseGeocodeResultItem"
                }
              ]
            },
            "description": "The results are presented as a JSON list of candidates in ranked order (most-likely to least-likely) based on the matched location criteria."
          }
        }
      },
      "ReverseGeocodeResultItem": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "distance": {
            "type": "integer",
            "format": "int64",
            "description": "The distance \\\"as the crow flies\\\" from the search center to this result item in meters. For example: \\\"172039\\\".\n\nWhen searching along a route this is the distance\\nalong the route plus the distance from the route polyline to this result item.",
            "example": 172039
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "houseNumberFallback": {
            "type": "boolean",
            "description": "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          },
          "countryInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryInfo"
              }
            ],
            "description": "Country Details (only rendered if 'show=countryInfo' is provided.)"
          }
        }
      },
      "LookupResponse": {
        "type": "object",
        "required": [
          "title",
          "address"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The localized display name of this result item."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the result item. This ID can be used for a Look Up by ID search as well."
          },
          "politicalView": {
            "type": "string",
            "description": "ISO3 country code of the item political view (default for international). This response element is populated when the politicalView parameter is set in the query"
          },
          "resultType": {
            "type": "string",
            "enum": [
              "administrativeArea",
              "locality",
              "street",
              "intersection",
              "addressBlock",
              "houseNumber",
              "postalCodePoint",
              "place"
            ]
          },
          "houseNumberType": {
            "type": "string",
            "enum": [
              "PA",
              "interpolated"
            ],
            "description": "* PA - a Point Address represents an individual address as a point object. Point Addresses are coming from trusted sources.\n  We can say with high certainty that the address exists and at what position. A Point Address result contains two types of coordinates.\n  One is the access point (or navigation coordinates), which is the point to start or end a drive. The other point is the position or display point.\n  This point varies per source and country. The point can be the rooftop point, a point close to the building entry, or a point close to the building,\n  driveway or parking lot that belongs to the building.\n* interpolated - an interpolated address. These are approximate positions as a result of a linear interpolation based on address ranges.\n  Address ranges, especially in the USA, are typical per block. For interpolated addresses, we cannot say with confidence that the address exists in reality.\n  But the interpolation provides a good location approximation that brings people in most use cases close to the target location.\n  The access point of an interpolated address result is calculated based on the address range and the road geometry.\n  The position (display) point is pre-configured offset from the street geometry.\n  Compared to Point Addresses, interpolated addresses are less accurate."
          },
          "addressBlockType": {
            "type": "string",
            "enum": [
              "block",
              "subblock"
            ]
          },
          "localityType": {
            "type": "string",
            "enum": [
              "postalCode",
              "subdistrict",
              "district",
              "city"
            ]
          },
          "administrativeAreaType": {
            "type": "string",
            "enum": [
              "county",
              "state",
              "country"
            ]
          },
          "houseNumberFallback": {
            "type": "boolean",
            "description": "If true, indicates that the requested house number was corrected to match the nearest known house number. This field is visible only when the value is true."
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Postal address of the result item."
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayResponseCoordinate"
              }
            ],
            "description": "The coordinates (latitude, longitude) of a pin on a map corresponding to the searched place."
          },
          "access": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessResponseCoordinate"
                }
              ]
            },
            "description": "Coordinates of the place you are navigating to (for example, driving or walking). This is a point on a road or in a parking lot."
          },
          "mapView": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapView"
              }
            ],
            "description": "The bounding box enclosing the geometric shape (area or line) that an individual result covers. `place` typed results have no `mapView`."
          },
          "categories": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of categories assigned to this place."
          },
          "chains": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chain"
                }
              ]
            },
            "description": "The list of chains assigned to this place."
          },
          "references": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SupplierReference"
                }
              ]
            },
            "description": "The list of supplier references available for this place."
          },
          "foodTypes": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                }
              ]
            },
            "description": "The list of food types assigned to this place."
          },
          "contacts": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactInformation"
                }
              ]
            },
            "description": "Contact information like phone, email, WWW."
          },
          "openingHours": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OpeningHours"
                }
              ]
            },
            "description": "A list of hours during which the place is open for business.\nThis field is optional: When it is not present, it means that we are lacking data about the place opening hours.\nDays without opening hours have to be considered as closed."
          },
          "timeZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeZoneInfo"
              }
            ],
            "description": "BETA - Provides time zone information for this place. (rendered only if 'show=tz' is provided.)"
          },
          "extended": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExtendedAttribute"
              }
            ],
            "description": "Extended attributes section to contain detailed information for specific result types."
          },
          "phonemes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhonemesSection"
              }
            ],
            "description": "Phonemes for address and place names. (rendered only if 'show=phonemes' is provided.)"
          },
          "streetInfo": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StreetInfo"
                }
              ]
            },
            "description": "Street Details (only rendered if 'show=streetInfo' is provided.)"
          },
          "countryInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryInfo"
              }
            ],
            "description": "Country Details (only rendered if 'show=countryInfo' is provided.)"
          }
        }
      }
    }
  },
  "paths": {
    "/geocode": {
      "servers": [
        {
          "url": "https://geocode.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Geocode",
        "description": "This endpoint allows to find the geo-coordinates of a known address, place, locality or administrative area, even if the query is incomplete or partly incorrect. It also returns a complete postal address string and address details. It supports structured, unstructured and hybrid queries - combinations of structured and unstructured query elements.",
        "parameters": [
          {
            "$ref": "#/components/parameters/atAutocompleteGeocode"
          },
          {
            "$ref": "#/components/parameters/inAutocompleteGeocode"
          },
          {
            "$ref": "#/components/parameters/limitAutosuggestBrowseDiscoverGeocode"
          },
          {
            "$ref": "#/components/parameters/qGeocode"
          },
          {
            "$ref": "#/components/parameters/qq"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showGeocode"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchGeocodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discover": {
      "servers": [
        {
          "url": "https://discover.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Discover",
        "description": "This endpoint processes a free-form text query for an address or place, and returns results in order of relevance.",
        "parameters": [
          {
            "$ref": "#/components/parameters/qDiscover"
          },
          {
            "$ref": "#/components/parameters/atAutosuggestDiscover"
          },
          {
            "$ref": "#/components/parameters/inAutosuggestDiscover"
          },
          {
            "$ref": "#/components/parameters/limitAutosuggestBrowseDiscoverGeocode"
          },
          {
            "$ref": "#/components/parameters/route"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showAutosuggestBrowseDiscover"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/autosuggest": {
      "servers": [
        {
          "url": "https://autosuggest.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Autosuggest",
        "description": "This endpoint suggests address or place candidates based on an incomplete or misspelled query,\n from which the user selects the best query to submit.\n\n_NOTE: The response may contain **experimental** elements not documented here.\n Any undocumented element is **subject to removal** at any time._\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/qAutosuggest"
          },
          {
            "$ref": "#/components/parameters/atAutosuggestDiscover"
          },
          {
            "$ref": "#/components/parameters/inAutosuggestDiscover"
          },
          {
            "$ref": "#/components/parameters/limitAutosuggestBrowseDiscoverGeocode"
          },
          {
            "$ref": "#/components/parameters/route"
          },
          {
            "$ref": "#/components/parameters/termsLimit"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showAutosuggestBrowseDiscover"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchAutosuggestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/autocomplete": {
      "servers": [
        {
          "url": "https://autocomplete.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Autocomplete",
        "description": "BETA: This endpoint completes the few entered keystrokes to the valid street address or administrative area to speed-up entering the address queries.",
        "parameters": [
          {
            "$ref": "#/components/parameters/qAutocomplete"
          },
          {
            "$ref": "#/components/parameters/atAutocompleteGeocode"
          },
          {
            "$ref": "#/components/parameters/inAutocompleteGeocode"
          },
          {
            "$ref": "#/components/parameters/limitAutocomplete"
          },
          {
            "$ref": "#/components/parameters/types"
          },
          {
            "$ref": "#/components/parameters/langAutocomplete"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showAutocomplete"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchAutocompleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/browse": {
      "servers": [
        {
          "url": "https://browse.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Browse",
        "description": "This endpoint provides search results for places based on different filters, such as categories or name, ranked by distance from a given search center.\nThe only mandatory elements exposed in the response are id and position. The other elements shown in the response samples section are only dataset attributes suggestions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/atBrowse"
          },
          {
            "$ref": "#/components/parameters/categories"
          },
          {
            "$ref": "#/components/parameters/chains"
          },
          {
            "$ref": "#/components/parameters/foodTypes"
          },
          {
            "$ref": "#/components/parameters/inBrowse"
          },
          {
            "$ref": "#/components/parameters/limitAutosuggestBrowseDiscoverGeocode"
          },
          {
            "$ref": "#/components/parameters/name"
          },
          {
            "$ref": "#/components/parameters/route"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showAutosuggestBrowseDiscover"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchBrowseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/revgeocode": {
      "servers": [
        {
          "url": "https://revgeocode.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Reverse Geocode",
        "description": "This endpoint returns the nearest address to geo coordinates specified in the request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/atRevgeocode"
          },
          {
            "$ref": "#/components/parameters/inRevgeocode"
          },
          {
            "$ref": "#/components/parameters/limitRevgeocode"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showRevgeocode"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenSearchReverseGeocodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lookup": {
      "servers": [
        {
          "url": "https://lookup.search.hereapi.com/v1"
        }
      ],
      "get": {
        "summary": "Lookup By ID",
        "description": "This endpoint looks up a known place by the HERE ID included in the request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/langAutosuggestBrowseDiscoverGeocodeLookupRevgeocode"
          },
          {
            "$ref": "#/components/parameters/politicalView"
          },
          {
            "$ref": "#/components/parameters/showLookup"
          },
          {
            "$ref": "#/components/parameters/X-Request-ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client error: request failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested id could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Client error: http method not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Client error: Rate limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Temporary server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  }
}